package DeficitAndSurflusLocationIdentification_Scripts;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.Point;
import com.aventstack.extentreports.ExtentTest;

import commonMethods.Keywords;
import commonMethods.Utils;

public class TS002toTS004_DeficitandSurplusLocationId_TC15to41 extends Keywords {

	public void Scenario2(WebDriver driver, ExtentTest test,ExtentTest test1, String url, int dataset) throws IOException, Exception {
 
		String Username = Utils.getDataFromTestData("TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset,
				"DeficitandSurplusLocationId", "Username");
		String Password = Utils.getDataFromTestData("TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset,
				"DeficitandSurplusLocationId", "Password");
		String Expected_screencolor = Utils.getDataFromTestData("TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset,
				"DeficitandSurplusLocationId", "Screen_background");
		String Expected_Mandatorycolor = Utils.getDataFromTestData("TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset,
				"DeficitandSurplusLocationId", "Mandatory_fieldcolor");
		String Expected_Mandatorycolor1 = Utils.getDataFromTestData("TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset,
				"DeficitandSurplusLocationId", "Mandatory_fieldcolor1");
		String Expected_Autogeneratedcolorcode = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"Autogenerated_Color");
		String Expected_FontFamily = Utils.getDataFromTestData("TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset,
				"DeficitandSurplusLocationId", "FontFamily");
		String Expected_Version_Xposition = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"Version_Xposition");
		String Expected_Version_Yposition = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"Version_Yposition");
		String ID = Utils.getDataFromTestData("TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset,
				"DeficitandSurplusLocationId", "Id");
		String Expected_Created_Xposition = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"Created_Xposition");
		String Expected_Updated_Xposition = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"Updated_Xposition");
		String Expected_Updated_Yposition = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"Updated_Yposition");
		String Expected_FontFamily2 = Utils.getDataFromTestData("TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset,
				"DeficitandSurplusLocationId", "FontFamily2");
		String Year_color = Utils.getDataFromTestData("TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset,
				"DeficitandSurplusLocationId", "Year_color");
		String FromYear_X = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"FromYear_X");
		String FromWeek_X = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"FromWeek_X");
		String ToYear_X = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"ToYear_X");
		String ToWeek_X = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"ToWeek_X");
		String FromYear_Y = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"FromYear_Y");
		String FromWeek_Y = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"FromWeek_Y");
		String ToYear_Y = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"ToYear_Y");
		String ToWeek_Y = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41_Dataset"+dataset, "DeficitandSurplusLocationId",
				"ToWeek_Y");
		

		WebDriverWait wait = new WebDriverWait(driver, 60);

		navigateUrl(driver, url);

		Fluentwait(driver, Username_input);
		sendKeys(driver, Username_input, Username);

		Fluentwait(driver, Password_input);
		sendKeys(driver, Password_input, Password);

		Fluentwait(driver, SignIn);
		click(driver, SignIn);

		wait(driver, "5");

		if (isDisplayed(driver, session_confirmation)) {
			Fluentwait(driver, session_confirmation);
			click(driver, session_confirmation);
		}

		Fluentwait(driver, Searchbox);
		sendKeys(driver, Searchbox, "Deficit and Surplus Location Identification");

		Fluentwait(driver, Selectdeficit);
		click(driver, Selectdeficit);

		wait(driver, "5");

		Extent_cal(test, "Testcase 15 - Ensure that the screen background should be in correct color");

		Fluentwait(driver, Screen);
		String actualscreencolor = getTextBackgroundColor(driver, Screen);

		if (actualscreencolor.equals(Expected_screencolor)) {

			System.out.println("Screen Background color Matched || Expected screen color was : " + Expected_screencolor
					+ " || Actual screen color was " + actualscreencolor);
			Extent_pass(driver, "Screen Background color Matched || Expected screen color was : " + Expected_screencolor
					+ " || Actual screen color was " + actualscreencolor, test,test1);
			
		} else {
			System.out.println("Screen Background color Not Matched || Expected screen color was : " + Expected_screencolor
					+ " || Actual screen color was " + actualscreencolor);
			Extent_fail(driver, "Screen Background color Not Matched || Expected screen color was : " + Expected_screencolor
					+ " || Actual screen color was " + actualscreencolor, test,test1);
		}

		System.out
				.println("//***************************Testcase 15 Completed **************************************//");

		
		Extent_cal(test,
				"Testcase 19 - Ensure that the mandatory field should be highlighted with SVM standard color ");

		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "5");

		Fluentwait(driver, New);
		click(driver, New);

		wait(driver, "2");
		
		Fluentwait(driver, createnew_confirm);
		click(driver, createnew_confirm);

		wait(driver, "3");

		String Fromyear_Backroundcolor = getTextBackgroundColor(driver, From_Year_Field);

		System.out.println("Fromyear_Backroundcolor : " + Fromyear_Backroundcolor);

		if (Fromyear_Backroundcolor.equals(Year_color)) {

			System.out.println("From year Background color Matched || Expected From year field color was : " + Year_color
					+ " || Actual From year field color was " + Fromyear_Backroundcolor);
			Extent_pass(driver, "From year Background color Matched || Expected From year field color was : " + Year_color
					+ " || Actual From year field color was " + Fromyear_Backroundcolor, test,test1);
		} else {
			System.out.println("From year Background color Not Matched || Expected From year field color was : " + Year_color
					+ " || Actual From year field color was " + Fromyear_Backroundcolor);
			Extent_fail(driver, "From year Background color Not Matched || Expected From year field color was : " + Year_color
					+ " || Actual From year field color was " + Fromyear_Backroundcolor, test,test1);
		}

		String Toyear_Backroundcolor = getTextBackgroundColor(driver, Toyear_input);

		System.out.println("Fromyear_Backroundcolor : " + Toyear_Backroundcolor);

		if (Toyear_Backroundcolor.equals(Year_color)) {

			System.out.println("To year Background color Matched || Expected To year field color was : " + Year_color
					+ " || Actual To year field color was " + Toyear_Backroundcolor);
			Extent_pass(driver, "From year Background color Matched || Expected To year field color was : " + Year_color
					+ " || Actual To year field color was " + Toyear_Backroundcolor, test,test1);
		} else {
			System.out.println("To year Background color Not Matched || Expected To year field color was : " + Year_color
					+ " || Actual To year field color was " + Toyear_Backroundcolor);
			Extent_fail(driver, "To year Background color Not Matched || Expected To year field color was : " + Year_color
					+ " || Actual To year field color was " + Toyear_Backroundcolor, test,test1);
		}

		String Fromweek_Backroundcolor = getTextBackgroundColor(driver, Fromweek_input);

		System.out.println("Fromyear_Backroundcolor : " + Fromweek_Backroundcolor);

		if (Fromweek_Backroundcolor.equals(Expected_Mandatorycolor)) {

			System.out.println("From week Background color Matched || Expected From Week field color was : " + Expected_Mandatorycolor
					+ " || Actual From Week field color was " + Fromweek_Backroundcolor);
			Extent_pass(driver, "From week Background color Matched || Expected From Week field color was : " + Expected_Mandatorycolor
					+ " || Actual From Week field color was " + Fromweek_Backroundcolor, test,test1);
		} else {
			System.out.println("From week Background color Not Matched || Expected From Week field color was : " + Expected_Mandatorycolor
					+ " || Actual From Week field color was " + Fromweek_Backroundcolor);
			Extent_fail(driver, "From week Background color Not Matched || Expected From Week field color was : " + Expected_Mandatorycolor
					+ " || Actual From Week field color was " + Fromweek_Backroundcolor, test,test1);
		}

		String Toweek_Backroundcolor = getTextBackgroundColor(driver, Toweek_input);

		System.out.println("Fromyear_Backroundcolor : " + Toweek_Backroundcolor);

		if (Toweek_Backroundcolor.equals(Expected_Mandatorycolor)) {

			System.out.println("To week Background color Matched || Expected To Week field color was : " + Expected_Mandatorycolor
					+ " || Actual To Week field color was " + Toweek_Backroundcolor);
			Extent_pass(driver, "To week Background color Matched || Expected To Week field color was : " + Expected_Mandatorycolor
					+ " || Actual To Week field color was " + Toweek_Backroundcolor, test,test1);
		} else {
			System.out.println("To week Background color Not Matched || Expected To Week field color was : " + Expected_Mandatorycolor
					+ " || Actual To Week field color was " + Toweek_Backroundcolor);
			Extent_fail(driver, "To week Background color Not Matched || Expected To Week field color was : " + Expected_Mandatorycolor
					+ " || Actual To Week field color was " + Toweek_Backroundcolor, test,test1);
		}

		System.out
				.println("//***************************Testcase 19 Completed **************************************//");

	
		Extent_cal(test,
				"Testcase 20 - Ensure that the auto generated and reference no field should be highlighted with SVM standard color");

		String ID_Backroundcolor = getTextBackgroundColor(driver, IDField);

		System.out.println("Fromyear_Backroundcolor : " + ID_Backroundcolor);

		if (ID_Backroundcolor.equals(Expected_Autogeneratedcolorcode)) {

			System.out.println("Id field Background color Matched || Expected ID field color was : " + Expected_Autogeneratedcolorcode
					+ " || Actual ID field color was " + ID_Backroundcolor);
			Extent_pass(driver, "Id field Background color Matched || Expected ID field color was : " + Expected_Autogeneratedcolorcode
					+ " || Actual ID field color was " + ID_Backroundcolor, test,test1);
		} else {
			System.out.println("Id field Background color Not Matched || Expected ID field color was : " + Expected_Autogeneratedcolorcode
					+ " || Actual ID field color was " + ID_Backroundcolor);
			Extent_fail(driver, "Id field Background color Not Matched || Expected ID field color was : " + Expected_Autogeneratedcolorcode
					+ " || Actual ID field color was " + ID_Backroundcolor, test,test1);
		}
		
		System.out
		.println("//***************************Testcase 20 Completed **************************************//");
		
		Extent_cal(test, "Testcase 18 - Ensure that the read only mode field background should be in correct color");
		

		String SurplusQty_Backroundcolor = getTextBackgroundColor(driver, SurplusQty);

		System.out.println("Fromyear_Backroundcolor : " + SurplusQty_Backroundcolor);

		if (SurplusQty_Backroundcolor.equals(Expected_Mandatorycolor1)) {

			System.out.println("Surplus field Background color Matched || Expected SurplusQty field color was : " + Expected_Mandatorycolor1
					+ " || Actual SurplusQty field color was " + SurplusQty_Backroundcolor);
			Extent_pass(driver, "Surplus field Background color Matched || Expected SurplusQty field color was : " + Expected_Mandatorycolor1
					+ " || Actual SurplusQty field color was " + SurplusQty_Backroundcolor, test,test1);
		} else {
			System.out.println("Surplus field Background color Not Matched || Expected SurplusQty field color was : " + Expected_Mandatorycolor1
					+ " || Actual SurplusQty field color was " + SurplusQty_Backroundcolor);
			Extent_fail(driver, "Surplus field Background color Not Matched || Expected SurplusQty field color was : " + Expected_Mandatorycolor1
					+ " || Actual SurplusQty field color was " + SurplusQty_Backroundcolor, test,test1);
		}

		String DeficitQty_Backroundcolor = getTextBackgroundColor(driver, DeficitQty);

		System.out.println("Fromyear_Backroundcolor : " + DeficitQty_Backroundcolor);

		if (DeficitQty_Backroundcolor.equals(Expected_Mandatorycolor1)) {

			System.out.println("Deficit field Background color Matched || Expected DeficitQty field color was : " + Expected_Mandatorycolor1
					+ " || Actual DeficitQty field color was " + DeficitQty_Backroundcolor);
			Extent_pass(driver, "Deficit field Background color Matched || Expected DeficitQty field color was : " + Expected_Mandatorycolor1
					+ " || Actual DeficitQty field color was " + DeficitQty_Backroundcolor, test,test1);
		} else {
			System.out.println("Deficit field Background color Not Matched || Expected DeficitQty field color was : " + Expected_Mandatorycolor1
					+ " || Actual DeficitQty field color was " + DeficitQty_Backroundcolor);
			Extent_fail(driver, "Deficit field Background color Not Matched || Expected DeficitQty field color was : " + Expected_Mandatorycolor1
					+ " || Actual DeficitQty field color was " + DeficitQty_Backroundcolor, test,test1);
		}

		System.out
				.println("//***************************Testcase 18 Completed **************************************//");

		Extent_cal(test, "Testcase 24 - Ensure text in all fields specified in the correct screen font");

		String FromYearfontfamily = Getcssvalue(driver, Fromyear_input, "font-family");

		System.out.println("fontfamily : " + FromYearfontfamily);

		if (FromYearfontfamily.equals(Expected_FontFamily2)) {

			System.out.println("From year font family Matched || Expected Font family of From Year field text is : " + Expected_FontFamily2
					+ " || Actual font family of From Year field text is : " + FromYearfontfamily);
			Extent_pass(driver, "From year font family Matched || Expected Font family of From Year field text is : " + Expected_FontFamily2
					+ " || Actual font family of From Year field text is : " + FromYearfontfamily, test,test1);
		} else {
			System.out
					.println("From year font family Not Matched || Expected Font family of From Year field text is : " + Expected_FontFamily2
							+ " || Actual font family of From Year field text is : " + FromYearfontfamily);
			Extent_fail(driver,
					"From year font family Not Matched || Expected Font family of From Year field text is : " + Expected_FontFamily2
							+ " || Actual font family of From Year field text is : " + FromYearfontfamily,
					test,test1);

		}

		String Toyearfontfamily = Getcssvalue(driver, Toyear_input, "font-family");

		System.out.println("fontfamily : " + Toyearfontfamily);

		if (Toyearfontfamily.equals(Expected_FontFamily2)) {

			System.out.println("To year font family Matched || Expected Font family of To Year field text is : " + Expected_FontFamily2
					+ " || Actual font family of To Year field text is : " + Toyearfontfamily);
			Extent_pass(driver, "To year font family Matched || Expected Font family of To Year field text is : " + Expected_FontFamily2
					+ " || Actual font family of To Year field text is : " + Toyearfontfamily, test,test1);
		} else {
			System.out.println("To year font family Not Matched || Expected Font family of To Year field text is : " + Expected_FontFamily2
					+ " || Actual font family of To Year field text is : " + Toyearfontfamily);
			Extent_fail(driver, "To year font family Not Matched || Expected Font family of To Year field text is : "
					+ Expected_FontFamily2 + " || Actual font family of To Year field text is : " + Toyearfontfamily,
					test,test1);

		}

		String Fromweekfontfamily = Getcssvalue(driver, Fromweek_input, "font-family");

		System.out.println("fontfamily : " + Fromweekfontfamily);

		if (Fromweekfontfamily.equals(Expected_FontFamily)) {

			System.out.println("From week font family Matched || Expected Font family of From week field text is : " + Expected_FontFamily
					+ " || Actual font family of From week field text is : " + Fromweekfontfamily);
			Extent_pass(driver, "From week font family Matched || Expected Font family of From week field text is : " + Expected_FontFamily
					+ " || Actual font family of From week field text is : " + Fromweekfontfamily, test,test1);
		} else {
			System.out.println("From week font family Not Matched || Expected Font family of From week field text is : " + Expected_FontFamily
					+ " || Actual font family of From week field text is : " + Fromweekfontfamily);
			Extent_fail(driver, "From week font family Not Matched || Expected Font family of From week field text is : "
					+ Expected_FontFamily + " || Actual font family of From week field text is : " + Fromweekfontfamily,
					test,test1);

		}

		String Toweekfontfamily = Getcssvalue(driver, Toweek_input, "font-family");

		System.out.println("fontfamily : " + Toweekfontfamily);

		if (Toweekfontfamily.equals(Expected_FontFamily)) {

			System.out.println("To week font family Matched || Expected Font family of To week field text is : " + Expected_FontFamily
					+ " || Actual font family of To week field text is : " + Toweekfontfamily);
			Extent_pass(driver, "To week font family Matched || Expected Font family of To week field text is : " + Expected_FontFamily
					+ " || Actual font family of To week field text is : " + Toweekfontfamily, test,test1);
		} else {
			System.out.println("To week font family Not Matched || Expected Font family of To week field text is : " + Expected_FontFamily
					+ " || Actual font family of To week field text is : " + Toweekfontfamily);
			Extent_fail(driver, "To week font family Not Matched || Expected Font family of To week field text is : " + Expected_FontFamily
					+ " || Actual font family of To week field text is : " + Toweekfontfamily, test,test1);

		}

		String SurplusQtyfontfamily = Getcssvalue(driver, SurplusQty, "font-family");

		System.out.println("fontfamily : " + SurplusQtyfontfamily);

		if (SurplusQtyfontfamily.equals(Expected_FontFamily)) {

			System.out.println("Surplus quantity font family Matched || Expected Font family of SurplusQty text is : " + Expected_FontFamily
					+ " || Actual font family of SurplusQty field text is : " + SurplusQtyfontfamily);
			Extent_pass(driver, "Surplus quantity font family Matched || Expected Font family of SurplusQty field text is : " + Expected_FontFamily
					+ " || Actual font family of SurplusQty field text is : " + SurplusQtyfontfamily, test,test1);
		} else {
			System.out
					.println("Surplus quantity font family Not Matched || Expected Font family of SurplusQty field text is : " + Expected_FontFamily
							+ " || Actual font family of SurplusQty field text is : " + SurplusQtyfontfamily);
			Extent_fail(driver,
					"Surplus quantity font family Not Matched || Expected Font family of SurplusQty field text is : " + Expected_FontFamily
							+ " || Actual font family of SurplusQty field text is : " + SurplusQtyfontfamily,
					test,test1);

		}

		String DeficitQtyfontfamily = Getcssvalue(driver, DeficitQty, "font-family");

		System.out.println("fontfamily : " + DeficitQtyfontfamily);

		if (DeficitQtyfontfamily.equals(Expected_FontFamily)) {

			System.out.println("Deficit quantity font family Matched || Expected Font family of DeficitQty text is : " + Expected_FontFamily
					+ " || Actual font family of DeficitQty field text is : " + DeficitQtyfontfamily);
			Extent_pass(driver, "Deficit quantity font family Matched || Expected Font family of DeficitQty field text is : " + Expected_FontFamily
					+ " || Actual font family of DeficitQty field text is : " + DeficitQtyfontfamily, test,test1);
		} else {
			System.out
					.println("Deficit quantity font family Not Matched || Expected Font family of DeficitQty field text is : " + Expected_FontFamily
							+ " || Actual font family of DeficitQty field text is : " + DeficitQtyfontfamily);
			Extent_fail(driver,
					"Deficit quantity font family Not Matched || Expected Font family of DeficitQty field text is : " + Expected_FontFamily
							+ " || Actual font family of DeficitQty field text is : " + DeficitQtyfontfamily,
					test,test1);

		}

		Fluentwait(driver, Globalserach);
		click(driver, Globalserach);

		Fluentwait(driver, Globalserach_IDInput);
		sendKeys(driver, Globalserach_IDInput, ID);

		Fluentwait(driver, Click_Search);
		click(driver, Click_Search);

		wait(driver, "3");
		Fluentwait(driver, SelectID);
		doubleClick(driver, SelectID);

		wait(driver, "5");
		
		for (int i = 1; i <= 19; i++) {

			WebElement gridfields = driver.findElement(By.xpath("(//div[@aria-colindex='" + i + "'])[1]"));

			Actions action = new Actions(driver);

			action.moveToElement(gridfields).build().perform();
			
			String Grid_field_fonts = Getcssvalue_webelement(driver, gridfields, "font-family");
			
			String Columname = getAttribute_webelement(driver, gridfields, "col-id");
			

			if (Grid_field_fonts.equals(Expected_FontFamily)) {

				System.out.println(
						"Grid fields font family Matched || Expected Font family of Grid field " + Columname + " is : " + Expected_FontFamily
								+ " || Actual font family of Grid field " + Columname + " is : " + Grid_field_fonts);
				Extent_pass(driver,
						"Grid fields font family Matched || Expected Font family of Grid field " + Columname + " is : " + Expected_FontFamily
								+ " || Actual font family of Grid field " + Columname + " is : " + Grid_field_fonts,
						test,test1);
			} else {
				System.out.println("Grid fields font family Not Matched || Expected Font family of Grid field " + Columname + " is : "
						+ Expected_FontFamily + " || Actual font family of Grid field " + Columname + " is : " + Grid_field_fonts);
				Extent_fail(driver,
						"Grid fields font family Not Matched || Expected Font family of Grid field " + Columname + " is : " + Expected_FontFamily + " "
										+ "|| Actual font family of Grid field " + Columname + " is : "+ Grid_field_fonts,test,test1);

			}

		}

		System.out
				.println("//***************************Testcase 24 Completed **************************************//");

		Extent_cal(test, "Testcase 26 - Ensure all the field edits boxes aligned perfectly on the screen");

		Fluentwait(driver, New);
		click(driver, New);

		Fluentwait(driver, createnew_confirm);
		click(driver, createnew_confirm);

		wait(driver, "3");

		List<String> editfields = Arrays.asList("From Year", "From Week", "To Year", "To Week");

		List<String> Xposition = Arrays.asList(FromYear_X, FromWeek_X, ToYear_X, ToWeek_X);

		List<String> Yposition = Arrays.asList(FromYear_Y, FromWeek_Y, ToYear_Y, ToWeek_Y);

		boolean editfield = true;

		for (int i = 0; i < 4; i++) {

			String field1 = editfields.get(i);

			String Expected_XPosition = Xposition.get(i);

			String Expected_YPosition = Yposition.get(i);

			WebElement Editfield = driver
					.findElement(By.xpath("(//label[text()='" + field1 + "']/following::input)[1]"));

			Point Editfieldlocation = Editfield.getLocation();

			int Editfield_xposition = Editfieldlocation.getX();

			String actual_Editfield_XPosition = String.valueOf(Editfield_xposition);

			System.out.println("xposition :" + actual_Editfield_XPosition);

			int Editfield_yposition = Editfieldlocation.getY();

			String actual_Editfield_YPosition = String.valueOf(Editfield_yposition);

			System.out.println("yposition :" + actual_Editfield_YPosition);

			if (actual_Editfield_XPosition.equals(Expected_XPosition)
					&& actual_Editfield_YPosition.equals(Expected_YPosition)) {

				Extent_pass(
						driver, "Expected " + field1 + " Edit field X position is : " + Expected_XPosition
								+ " || Actual " + field1 + " Edit field X position is : " + actual_Editfield_XPosition,
						test,test1);
				Extent_pass(
						driver, "Expected " + field1 + " Edit field Y position is : " + Expected_YPosition
								+ " || Actual " + field1 + " Edit field Y position is : " + actual_Editfield_YPosition,
						test,test1);
				
			} else {

				Extent_fail(
						driver, "Expected " + field1 + " Edit field X position is : " + Expected_XPosition
								+ " || Actual " + field1 + " Edit field X position is : " + actual_Editfield_XPosition,
						test,test1);
				Extent_fail(
						driver, "Expected " + field1 + " Edit field Y position is : " + Expected_YPosition
								+ " || Actual " + field1 + " Edit field Y position is : " + actual_Editfield_YPosition,
						test,test1);

				editfield = false;
			}

		}

		if (editfield) {
			Extent_pass(driver, "Edit field boxes are alligned properly in the screen", test,test1);
		} else {
			Extent_fail(driver, "Edit field boxes are not alligned properly in the screen", test,test1);
		}

		System.out.println("Testcase 26 completed");

		Extent_cal(test,
				" Testcase 30 and Testcase 31 Ensure all character or alphanumeric or numeric fields correctly alligned");
		
		Fluentwait(driver, Globalserach);
		click(driver, Globalserach);

		Fluentwait(driver, Globalserach_IDInput);
		sendKeys(driver, Globalserach_IDInput, ID);

		Fluentwait(driver, Click_Search);
		click(driver, Click_Search);

		wait(driver, "3");
		Fluentwait(driver, SelectID);
		doubleClick(driver, SelectID);

		wait(driver, "5");		

		WebElement scroller = driver.findElement(By.xpath("//div[@ref='eBodyHorizontalScrollViewport']"));

		wait(driver, "3");

		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollLeft = 0;", scroller);

		Actions action = new Actions(driver);
		
		List<String> columns = Arrays.asList("Location","Equipment type","Region","Country","Import","Export","Imbalance","Weeks","Weekly Imbalance","Bench mark stock","Applied surplus/deficit","Calculated surplus/deficit","Status","Stock status","One way out load","One way out return","One way in load","One way in trans","One way in return");

		for (int i = 1; i <= 19; i++) {

			WebElement gridfields = driver.findElement(By.xpath("(//div[@aria-colindex='" + i + "'])[1]"));

			action.moveToElement(gridfields).build().perform();

			String Grid_field = getTextofWebelement(driver, gridfields, "gridfields");

			String Allignmenttype = determineType(Grid_field);

			System.out.println("Allignmenttype : " + Allignmenttype);

			String attributevalue = getAttribute_webelement(driver, gridfields, "class");
			
//			String attributevalue = gridfields.getAttribute("class");
		
			String Columname = columns.get(i-1);

			System.out.println("attributevalue : " + attributevalue);

			String allignment = extractDirection(attributevalue);

			if (allignment == null) {
				System.out.println("Unable to determine alignment for column " + Columname);
//		        Extent_fail(driver, "Unable to determine alignment for column " + Columname, test,test1);
				continue;
			}

			System.out.println("allignment : " + allignment);

			if (Allignmenttype.equals("Alphabetic")) {

				if (allignment.equals("left")) {

					System.out.println("Column " + Columname + " is Alphabetic and it aligned on the left side");
					Extent_pass(driver, "Column " + Columname + " is Alphabetic and it aligned on the left side", test,test1);

				} else {
					System.out
							.println("Column " + Columname + " is Alphabetic and it was not aligned on the left side");
					Extent_fail(driver,
							"Column " + Columname + " is Alphabetic and it was not aligned on the left side", test,test1);
				}

			}

			if (Allignmenttype.equals("Numeric")) {

				if (allignment.equals("right")) {

					System.out.println("Column " + Columname + " is Numeric and it aligned on the Right side");
					Extent_pass(driver, "Column " + Columname + " is Numeric and it aligned on the Right side", test,test1);

				} else {
					System.out.println("Column " + Columname + " is Numeric and it was not aligned on the Right side");
					Extent_fail(driver, "Column " + Columname + " is Numeric and it was not aligned on the Right side",
							test,test1);
				}

			}

			if (Allignmenttype.equals("Alphanumeric")) {

				System.out.println("Column " + Columname + " is Alpha Numeric ");

			}
		}

		System.out.println(	"//***************************Testcase 30 and Testcase 31 Completed **************************************//");

		Extent_cal(test, "Testcase 33 - Ensure all user input captured in UPPER case or lowercase consistently");

		Fluentwait(driver, ColumnFilter);
		click(driver, ColumnFilter);

		for (int i = 1; i <= 2; i++) {

			wait(driver, "2");

			String FieldInput_name = Utils.getDataFromTestData("TS002_DeficitandSurplusLocationIdentification_Fieldvalue", "DeficitandSurplusLocationId","Fieldvalue" + i);

			Fluentwait(driver, ColumnFilter_Input);
			clear(driver, ColumnFilter_Input);
			sendKeys(driver, ColumnFilter_Input, FieldInput_name);

			wait(driver, "3");
			
//			elementScreenShot_new(driver, ColumnFilter_field, "/Expected_screenshot/Deficit/filter"+i);
			
			elementScreenShot_new(driver, ColumnFilter_field, "/Actual_screenshot/Deficit/filter"+i);
			
			if (imageComparison2(driver, "//Deficit//filter"+i, "//Deficit//filter"+i) == true) {

				System.out
				.println("Filter is capturing both Upper case and lower case letters and the given value was : "
						+ FieldInput_name);
				Extent_pass(driver,	"Filter is capturing both Upper case and lower case letters and the given value was : "
						+ FieldInput_name,test,test1);
			} else {

				System.out.println(
						"Filter is not capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name);
				Extent_fail(driver,
						"Filter is not capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name,test,test1);
			}

			WebElement columnfilter = driver.findElement(
					By.xpath("((//span[text()='Columns'])[1]/following::span[text()='Bench Mark Stock'])[1]"));

			if (!isDisplayed1(driver, columnfilter)) {

				System.out
						.println("Filter is capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name);
				Extent_pass(driver,
						"Filter is capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name,
						test,test1);
			} else {

				System.out.println(
						"Filter is not capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name);
				Extent_fail(driver,
						"Filter is not capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name,test,test1);
			}

		}

		for (int i = 3; i <= 19; i++) {

			wait(driver, "2");

			String FieldInput_name = Utils.getDataFromTestData(
					"TS002_DeficitandSurplusLocationIdentification_Fieldvalue", "DeficitandSurplusLocationId",
					"Fieldvalue" + i);

			Fluentwait(driver, ColumnFilter_Input);
			clear(driver, ColumnFilter_Input);
			sendKeys(driver, ColumnFilter_Input, FieldInput_name);

			wait(driver, "3");

//			elementScreenShot_new(driver, ColumnFilter_field, "/Expected_screenshot/Deficit/filter" + i);

			elementScreenShot_new(driver, ColumnFilter_field, "/Actual_screenshot/Deficit/filter" + i);

			if (imageComparison2(driver, "//Deficit//filter" + i, "//Deficit//filter" + i) == true) {

				System.out
						.println("Filter is capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name);
				Extent_pass(driver,
						"Filter is capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name,
						test,test1);
			} else {

				System.out.println(
						"Filter is not capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name);
				Extent_fail(driver,
						"Filter is not capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name,
						test,test1);
			}

		}

		wait(driver, "2");

		Fluentwait(driver, ColumnFilter);
		click(driver, ColumnFilter);

		System.out
				.println("//***************************Testcase 33 Completed **************************************//");

		Extent_cal(test, "Testcase 35 - Ensure that all windows have a consistent look and feel");

		Fluentwait(driver, New);
		click(driver, New);

		Fluentwait(driver, createnew_confirm);
		click(driver, createnew_confirm);

		wait(driver, "3");

//		takescreenshot(driver, "//Expected_screenshot//Deficit//screen");
		takescreenshot(driver, "//Actual_screenshot//Deficit//screen");

		if (imageComparison2(driver, "//Deficit//screen", "//Deficit//screen") == true) {

			System.out.println("First windows have a consistent look and feel");
			Extent_pass(driver, "First windows have a consistent look and feel", test,test1);
		} else {

			System.out.println("First window will be showing different look and feel than the expected");
			Extent_fail(driver, "First window will be showing different look and feel than the expected", test,test1);
		}

		Fluentwait(driver, Searchbox);
		sendKeys(driver, Searchbox, "Deficit and Surplus Location Identification");

		Fluentwait(driver, Selectdeficit);
		click(driver, Selectdeficit);

		Fluentwait(driver, Newtab_confirm);
		click(driver, Newtab_confirm);

		switchtotab(driver, 1);

//		takescreenshot(driver, "//Expected_screenshot//Deficit//screen2");
		takescreenshot(driver, "//Actual_screenshot//Deficit//screen2");

		if (imageComparison2(driver, "//Deficit//screen2", "//Deficit//screen2") == true) {

			System.out.println("Second window have a consistent look and feel");
			Extent_pass(driver, "Second window have a consistent look and feel", test,test1);
		} else {

			System.out.println("Second window will be showing different look and feel than the expected");
			Extent_fail(driver, "Second window will be showing different look and feel than the expected", test,test1);
		}

		System.out.println("Testcase 35 Completed");

		
		Extent_cal(test, "Testcase 37 - Ensure Maximize button functionality");
	
		Fluentwait(driver, Tree_table);
		click(driver, Tree_table);
		
		Fluentwait(driver, Full_screen);
		click(driver, Full_screen);
		
		wait(driver,"3");
		
//		takescreenshot(driver, "//Expected_screenshot//Deficit//Fullscreen");
		takescreenshot(driver, "//Actual_screenshot//Deficit//Fullscreen");

		if (imageComparison2(driver, "//Deficit//Fullscreen", "//Deficit//Fullscreen") == true) {

			System.out.println("Maximise button is working fine");
			Extent_pass(driver, "Maximise button is working fine", test,test1);
		} else {

			System.out.println("Maximise button is not working fine");
			Extent_fail(driver, "Maximise button is not working fine", test,test1);
		}
		
		System.out.println("Testcase 37 completed");
		
		wait(driver,"5");
		
		
		Extent_cal(test, "Testcase 36 - Ensure Minimize button functionality");
		
		
		Robot rbt = new Robot();
		
		rbt.keyPress(KeyEvent.VK_ESCAPE);
		
//		takescreenshot(driver, "//Expected_screenshot//Deficit//Minimise");
		takescreenshot(driver, "//Actual_screenshot//Deficit//Minimise");

		if (imageComparison2(driver, "//Deficit//Minimise", "//Deficit//Minimise") == true) {

			System.out.println("Minimise button is working fine");
			Extent_pass(driver, "Minimise button is working fine", test,test1);
		} else {

			System.out.println("Minimise button is not working fine");
			Extent_fail(driver, "Minimise button is not working fine", test,test1);
		}
		
		System.out.println("Testcase 36 completed");
		
		
		Extent_cal(test, " Testcase 38 Ensure Scroll up and down functionality in Grids");
		
		wait(driver, "5");

		switchtotab(driver, 0);


		Fluentwait(driver, Globalserach);
		click(driver, Globalserach);

		Fluentwait(driver, Globalserach_IDInput);
		sendKeys(driver, Globalserach_IDInput, ID);

		Fluentwait(driver, Click_Search);
		click(driver, Click_Search);

		wait(driver, "3");
		Fluentwait(driver, SelectID);
		doubleClick(driver, SelectID);

		wait(driver, "5");

		Fluentwait(driver, Gridscroll);

		ScrollBarValidation1(driver, Gridscroll, "Grid scroll");

		System.out.println("//***************************Testcase 38 Completed **************************************//");
		
		
		Extent_cal(test, "Testcase 40 Ensure Version is placed at bottom of the left corner of the screen");

		Scrolltilltheelementvisible(driver, Verionfield);

		try {
			WebElement versionfield = driver.findElement(By.xpath("//label[contains(text(),'Version')]"));

			Point location = versionfield.getLocation();

			int xposition = location.getX();

			String actual_version_XPosition = String.valueOf(xposition);

			System.out.println("xposition :" + actual_version_XPosition);

			int yposition = location.getY();

			String actual_version_YPosition = String.valueOf(yposition);

			System.out.println("yposition :" + actual_version_YPosition);

			if (actual_version_XPosition.equals(Expected_Version_Xposition)
					&& actual_version_YPosition.equals(Expected_Version_Yposition)) {

				System.out.println("Version field is placed at the bottom of the left corner of the screen");
				Extent_pass(driver, "Version field is placed at the bottom of the left corner of the screen", test,test1);
				Extent_pass(driver, "Expected Version field X position is : " + Expected_Version_Xposition
						+ " || Actual Version field X position is : " + actual_version_XPosition, test,test1);
				Extent_pass(driver, "Expected Version field Y position is : " + Expected_Version_Yposition
						+ " || Actual Version field Y position is : " + actual_version_YPosition, test,test1);

			} else {

				System.out.println("Version field is not placed at the bottom of the left corner of the screen");
				Extent_fail(driver, "Version field is not placed at the bottom of the left corner of the screen", test,test1);
				Extent_fail(driver, "Expected Version field X position is : " + Expected_Version_Xposition
						+ " || Actual Version field X position is : " + actual_version_XPosition, test,test1);
				Extent_fail(driver, "Expected Version field Y position is : " + Expected_Version_Yposition
						+ " || Actual Version field Y position is : " + actual_version_YPosition, test,test1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			Extent_fail(driver, e.getLocalizedMessage(), test,test1);
		}

		System.out
				.println("//***************************Testcase 40 Completed **************************************//");

		Extent_cal(test,
				"Testcase 41 Ensure Create and Updated label is placed at bottom of the right corner of the screen");

		Scrolltilltheelementvisible(driver, Verionfield);

		try {
			WebElement Createdfield = driver.findElement(By.xpath("//label[contains(text(),'Created User')]"));

			Point Createdlocation = Createdfield.getLocation();

			int Createdxposition = Createdlocation.getX();

			String actual_Created_XPosition = String.valueOf(Createdxposition);

			System.out.println("xposition :" + actual_Created_XPosition);

			int Createdyposition = Createdlocation.getY();

			String actual_Created_YPosition = String.valueOf(Createdyposition);

			System.out.println("yposition :" + actual_Created_YPosition);

			if (actual_Created_XPosition.equals(Expected_Created_Xposition)
					&& actual_Created_YPosition.equals(Expected_Updated_Yposition)) {

				System.out.println("Created User field is placed at the bottom of the left corner of the screen");
				Extent_pass(driver, "Created User field is placed at the bottom of the left corner of the screen", test,test1);
				Extent_pass(driver, "Expected Created User field X position is : " + Expected_Created_Xposition
						+ " || Actual Created User field X position is : " + actual_Created_XPosition, test,test1);
				Extent_pass(driver, "Expected Created User field Y position is : " + Expected_Updated_Yposition
						+ " || Actual Created User field Y position is : " + actual_Created_YPosition, test,test1);

			} else {

				System.out.println("Created User field is not placed at the bottom of the left corner of the screen");
				Extent_fail(driver, "Created User field is not placed at the bottom of the left corner of the screen",
						test,test1);
				Extent_fail(driver, "Expected Created User field X position is : " + Expected_Created_Xposition
						+ " || Actual Created User field X position is : " + actual_Created_XPosition, test,test1);
				Extent_fail(driver, "Expected Created User field Y position is : " + Expected_Updated_Yposition
						+ " || Actual Created User field Y position is : " + actual_Created_YPosition, test,test1);
			}

			WebElement Updatedfield = driver.findElement(By.xpath("//label[contains(text(),'Updated User')]"));

			Point Updatedlocation = Updatedfield.getLocation();

			int Updatedxposition = Updatedlocation.getX();

			String actual_Updated_XPosition = String.valueOf(Updatedxposition);

			System.out.println("xposition :" + actual_Updated_XPosition);

			int Updatedyposition = Updatedlocation.getY();

			String actual_Updated_YPosition = String.valueOf(Updatedyposition);

			System.out.println("yposition :" + actual_Updated_YPosition);

			if (actual_Updated_XPosition.equals(Expected_Updated_Xposition)
					&& actual_Updated_YPosition.equals(Expected_Updated_Yposition)) {

				System.out.println("Updated field is placed at the bottom of the left corner of the screen");
				Extent_pass(driver, "Updated field is placed at the bottom of the left corner of the screen", test,test1);
				Extent_pass(driver, "Expected Updated field X position is : " + Expected_Updated_Xposition
						+ " || Actual Updated field X position is : " + actual_Updated_XPosition, test,test1);
				Extent_pass(driver, "Expected Updated field Y position is : " + Expected_Updated_Yposition
						+ " || Actual Updated field Y position is : " + actual_Updated_YPosition, test,test1);

			} else {

				System.out.println("Updated field is not placed at the bottom of the left corner of the screen");
				Extent_fail(driver, "Updated field is not placed at the bottom of the left corner of the screen", test,test1);
				Extent_fail(driver, "Expected Updated field X position is : " + Expected_Updated_Xposition
						+ " || Actual Updated field X position is : " + actual_Updated_XPosition, test,test1);
				Extent_fail(driver, "Expected Updated field Y position is : " + Expected_Updated_Yposition
						+ " || Actual Updated field Y position is : " + actual_Updated_YPosition, test,test1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			Extent_fail(driver, e.getLocalizedMessage(), test,test1);
		}

		System.out
				.println("//***************************Testcase 41 Completed **************************************//");

	
		Extent_cal(test, "Testcase 39 - Ensure Close button functionality");
		
		scrollBottom(driver);
		
		waitForElement(driver, Closetab);
		click(driver, Closetab);
		
		wait(driver,"3");
		
		if (!isDisplayed(driver, Deficittab)) {
			
			System.out.println("After click on close button Current screen was closed");
			Extent_pass(driver, "After click on close button Current screen was closed", test,test1);
			
		}else {
			
			System.out.println("After click on close button Current screen was not closed");
			Extent_fail(driver, "After click on close button Current screen was not closed", test,test1);
		}
		
		System.out.println("Testcase 39 completed");
		
	
	}	
	
}
