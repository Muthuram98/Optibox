package DeficitAndSurflusLocationIdentification_Scripts;

import java.io.IOException;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Set;

import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.UnhandledAlertException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.aventstack.extentreports.ExtentTest;

import commonMethods.Keywords;
import commonMethods.Utils;

public class TS012_TS013_DeficitandSurplusLocationId_TC213to262 extends Keywords {

	@SuppressWarnings("deprecation")
	public void Scenario12(WebDriver driver, ExtentTest test, ExtentTest test1, String url, int dataset)
			throws Exception {

		String Username = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"Username");
		String Password = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"Password");
		String Popup = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"New_Popup");
		String Year_pop = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"year_popup");

		String No_record = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"No_Records");
		String From_Year = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"From_Year");
		String To_Year = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"To_Year");
		String From_Year1 = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"From_Year1");
		String To_Year1 = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"To_Year_1");
		String save_Popup = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"Save_pop");
		String Edited_save = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"Edit_save");
		String Expected_Autogeneratedcolorcode = Utils.getDataFromTestData(
				"TS002toTS004_DeficitandSurplusLocationId_TC15to41", "DeficitandSurplusLocationId",
				"Autogenerated_Color");
		String From_Week = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"FromWeek");
		String To_Week = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"ToWeek");

		String Search_Id = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"Search_Id");
		String From_week2 = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"From_week");
		String To_week2 = Utils.getDataFromTestData(
				"TS012_TS013_DeficitandSurplusLocationIdentification_Dataset" + dataset, "DeficitandSurplusLocationId",
				"To_Week");

		String Import_file = System.getProperty("user.dir") + "\\uploads\\Equipment_Type.xlsx";
		String EquimentType_Alphabets1 = System.getProperty("user.dir") + "\\uploads\\Budget_Flow_Applied.xlsx";

		Actions act = new Actions(driver);

		WebDriverWait wait = new WebDriverWait(driver, 30);

		navigateUrl(driver, url);

		Fluentwait(driver, Username_input);
		sendKeys(driver, Username_input, Username);

		Fluentwait(driver, Password_input);
		sendKeys(driver, Password_input, Password);

		Fluentwait(driver, SignIn);
		click(driver, SignIn);

		wait(driver, "5");

		if (isDisplayed(driver, session_confirmation)) {
			Fluentwait(driver, session_confirmation);
			click(driver, session_confirmation);
		}

		wait(driver, "5");

		Fluentwait(driver, Searchbox);
		sendKeys(driver, Searchbox, "Deficit and Surplus Location Identification");

		Fluentwait(driver, Selectdeficit);
		click(driver, Selectdeficit);

		wait(driver, "5");

		while (isDisplayed(driver, delete_template)) {

			click(driver, delete_template);
			wait(driver, "2");

		}

		Extent_cal(test, "Testcase 213 - Ensure in new button functionality ");

		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "3");
		Fluentwait(driver, New);
		click(driver, New);

		wait(driver, "2");
		String pop = getText(driver, createnew_confirm_message);

		if (pop.equals(Popup)) {
			Extent_pass(driver, "Confirmation popup for create new record was displayed", test, test1);
			Extent_pass(driver, "Expected popup message was : " + Popup + " || Actual popup message was : " + pop, test,
					test1);
		} else {
			Extent_fail(driver, "Confirmation popup for create new record was not displayed", test, test1);
			Extent_fail(driver, "Expected popup message was : " + Popup + " || Actual popup message was : " + pop, test,
					test1);
		}

		Fluentwait(driver, New_Popup_No);
		click(driver, New_Popup_No);

		wait(driver, "3");

		System.out.println("**********************Testcase 213 Completed *************");

		Extent_cal(test, "Testcase 214 - Ensure in new button functionality, when click on Yes button  ");

		Fluentwait(driver, cancel_Op);
		click(driver, cancel_Op);

		Fluentwait(driver, Searchbox);
		sendKeys(driver, Searchbox, "Deficit and Surplus Location Identification");

		Fluentwait(driver, Selectdeficit);
		click(driver, Selectdeficit);

		wait(driver, "5");

		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "3");
		Fluentwait(driver, New);
		click(driver, New);

		wait(driver, "2");
		String pop1 = getText(driver, createnew_confirm_message);
		if (pop1.equals(Popup)) {
			Extent_pass(driver, "Confirmation popup for create new record was displayed", test, test1);
			Extent_pass(driver, "Expected popup message was : " + Popup + " || Actual popup message was : " + pop, test,
					test1);
		} else {
			Extent_fail(driver, "Confirmation popup for create new record was not displayed", test, test1);
			Extent_fail(driver, "Expected popup message was : " + Popup + " || Actual popup message was : " + pop, test,
					test1);
		}

		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);
		wait(driver, "2");

		if (IsElementEnabled(driver, Show)) {

			System.out.println("After opening the new screen, the show button is in enable status");
			Extent_pass(driver, "After opening the new screen, the show button is in enable status", test, test1);

		} else {

			System.out.println("After opening the new screen, the show button is not in enable status");
			Extent_fail(driver, "After opening the new screen, the show button is not in enable status", test, test1);
		}

		wait(driver, "2");
		if (IsElementEnabled(driver, Import)) {

			System.out.println("After opening the new screen, the Import button is in enable status");
			Extent_pass(driver, "After opening the new screen, the Import button is in enable status", test, test1);

		} else {

			System.out.println("After opening the new screen, the Import button is not in enable status");
			Extent_fail(driver, "After opening the new screen, the Import button is not in enable status", test, test1);
		}

		System.out.println("************************Testcase 214 Completed **********************");

		Extent_cal(test, "Testcase 215 - Ensure in rule imbalance text field ");

		Fluentwait(driver, Searchbox);
		sendKeys(driver, Searchbox, "Ero Rule Builder");

		Fluentwait(driver, Rulebuilder);
		click(driver, Rulebuilder);

		waitForElement(driver, EMS_Formula);
		String EmsFormula = getText(driver, EMS_Formula);

		System.out.println("EmsFormula : " + EmsFormula);

		if (EmsFormula.equals("#IMPORT#-#EXPORT#")) {

			System.out.println("Rule imbalance formula was displayed");
			Extent_pass(driver, "Rule imbalance formula was displayed", test, test1);
		} else {

			System.out.println("Rule imbalance formula was not displayed");
			Extent_fail(driver, "Rule imbalance formula was not displayed", test, test1);
		}

		if (!isClear(driver, EMS_Formula)) {

			System.out.println("Unable to edit the Ems rule imbalance formula");
			Extent_pass(driver, "Unable to edit the Ems rule imbalance formula", test, test1);

		} else {

			System.out.println("User can able to edit the Ems rule imbalance formula");
			Extent_fail(driver, "User can able to edit the Ems rule imbalance formula", test, test1);
		}

		System.out.println("Testcase 215 Completed");

		Extent_cal(test,
				"Testcase 220 - Ensure in export excel button functionality (with out records) window “already exists” ");

		Fluentwait(driver, Deficittab);
		click(driver, Deficittab);

		Fluentwait(driver, Show);
		click(driver, Show);

		wait(driver, "3");

		if (isDisplayed(driver, show_yes)) {

			Fluentwait(driver, show_yes);
			click(driver, show_yes);

		}
		wait(driver, "5");

		if (isDisplayed(driver, Warning_popup)) {
			System.out.println("popup shown");
			Fluentwait(driver, click_yes);
			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);

			Fluentwait(driver, Cancel);
			click(driver, Cancel);

			wait(driver, "2");
			Fluentwait(driver, New);
			click(driver, New);

			Fluentwait(driver, New_Popup_Yes);
			click(driver, New_Popup_Yes);
			wait(driver, "2");

			Fluentwait(driver, dropdown_option);
			click(driver, dropdown_option);

			Fluentwait(driver, Budget_Reposition);
			click(driver, Budget_Reposition);

			Fluentwait(driver, Budget);
			click(driver, Budget);

			wait(driver, "4");

//			uploadFileRobot(driver,EquimentType_Alphabets1);

			String upload_EquimentType_Alphabets1 = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe "
					+ EquimentType_Alphabets1;

			try {
				Runtime.getRuntime().exec(upload_EquimentType_Alphabets1);
			} catch (IOException e) {
				e.printStackTrace();
				System.out.println(e.getLocalizedMessage());
				Extent_fail(driver, e.getLocalizedMessage(), test, test1);
			}

			wait(driver, "10");

			Fluentwait(driver, Location3);

			if (isDisplayed(driver, click_yes)) {

				click(driver, click_yes);

				Fluentwait(driver, Click_ok);
				click(driver, Click_ok);
			}

			wait(driver, "3");

			Fluentwait(driver, ERO_Save);
			click(driver, ERO_Save);

			Fluentwait(driver, ERO_Save_ok);
			click(driver, ERO_Save_ok);
			wait(driver, "2");

		} else {
			System.out.println("popup not shown");
		}

		Format formatter = new SimpleDateFormat("ddMMYYYY HHmmss");
		Date date = new Date();
		String value = formatter.format(date);

		String Templatename = "Field" + value;

		Fluentwait(driver, Tree_table);
		click(driver, Tree_table);

		Fluentwait(driver, Saves_Template);
		click(driver, Saves_Template);

		Fluentwait(driver, Saves_Template_text);
		sendKeys(driver, Saves_Template_text, Templatename);

		Fluentwait(driver, Save_template);
		click(driver, Save_template);

		wait(driver, "3");

		Fluentwait(driver, Tree_table);
		click(driver, Tree_table);

		Fluentwait(driver, Saves_Template);
		click(driver, Saves_Template);

		Fluentwait(driver, Saves_Template_text);
		sendKeys(driver, Saves_Template_text, Templatename);

		WebElement element = driver.findElement(By.xpath("(//p[text()='Save As Template']//following::input)[2]"));

		element.click();

		try {
			// Wait until the alert is present
			Alert alert = wait.until(ExpectedConditions.alertIsPresent());

			// Check if the alert text matches the expected alert text
			if (alert.getText().equals("Template Name already exists")) {
				System.out.println("Alert for Template Name already exists is present");
				alert.accept(); // Handle the alert
				Extent_pass(driver, "Alert for Template Name already exists is present", test, test1);
			} else {
				System.out.println("Unexpected alert is present: " + alert.getText());
				alert.accept();
				Extent_fail(driver, "Unexpected alert is present: " + alert.getText(), test, test1);
			}
		} catch (Exception e) {
			System.out.println("Alert for Template Name already exists is not present");
			Extent_fail(driver, "Alert for Template Name already exists is not present", test, test1);
		}

		System.out.println("Testcase 220 Completed");

		Extent_cal(test,
				"Testcase 219 - Ensure in export excel button functionality (with out records) window “already exists” , when click on Cancel button");

		Fluentwait(driver, Canceltemplate);
		click(driver, Canceltemplate);

		wait(driver, "2");

		if (!isDisplayed(driver, Saveas_tap)) {

			System.out.println("After click on cancel button, Save as template tab got closed");
			Extent_pass(driver, "After click on cancel button, Save as template tab got closed", test, test1);
		} else {
			System.out.println("After click on cancel button, Save as template tab not get closed");
			Extent_fail(driver, "After click on cancel button, Save as template tab not get closed", test, test1);

		}

		System.out.println("Testcase 219 Completed");

		Extent_cal(test, "Testcase 241 - Ensure export excel button functionality with records displayed");

		String Filename = "Deficit and Surplus Location Identification";

		deleteFiles(Filename);

		Set<String> oldFiles = getDirectoryFiles();

		wait(driver, "5");

		Fluentwait(driver, Tree_table);
		click(driver, Tree_table);

		Fluentwait(driver, Export_Excel);
		click(driver, Export_Excel);

		wait(driver, "10");

		String baseFilename = "Deficit and Surplus Location Identification.xlsx";

		boolean isDownloaded = isNewFileDownloaded(oldFiles, baseFilename);

		if (isDownloaded == true) {

			System.out.println("New excel file is downloaded in the downloads folder");
			Extent_pass(driver, "New excel file is downloaded in the downloads folder", test, test1);

		} else {
			System.out.println("New excel file is not downloaded");
			Extent_fail(driver, "New excel file is not downloaded", test, test1);
		}

		System.out.println("Is file downloaded: " + isDownloaded);

		System.out.println("************************Testcase 241 Completed **********************");

		Extent_cal(test, "Testcase 216 - Ensure in export excel button functionality (with out records)");

		wait(driver, "5");

		deleteFiles(Filename);

		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "3");

		Fluentwait(driver, New);
		click(driver, New);

		Fluentwait(driver, createnew_confirm);
		click(driver, createnew_confirm);

		Fluentwait(driver, Fromyear_input);
//		clear(driver, Fromyear_input);
//		wait(driver,"2");
//		sendKeys(driver, Fromyear_input, From_Year2);
//		Fluentwait(driver, Save);
//		click(driver, Save);
		click(driver, Year_Drop_Down);
		click(driver, Year_Drop_Down);
		click(driver, Year_Drop_Down);
		click(driver, Year_Drop_Down);
		click(driver, Year_Drop_Down);
		click(driver, Year_Drop_Down);
		Fluentwait(driver, Year_To_Drop_Down);
		click(driver, Year_To_Drop_Down);
		click(driver, Year_To_Drop_Down);
		click(driver, Year_To_Drop_Down);
		click(driver, Year_To_Drop_Down);
		click(driver, Year_To_Drop_Down);
		click(driver, Year_To_Drop_Down);
		wait(driver, "2");
//		click(driver, Year_To_Drop_Down);
		wait(driver, "2");
//	    Fluentwait(driver, To_Year_Input);
//	    clear(driver, To_Year_Input);
//	    sendKeys(driver, To_Year_Input, To_Year2);
//	    Fluentwait(driver, Save);
//		click(driver, Save);
//	    wait(driver, "2");
		clear(driver, Fromweek_input);
		sendKeys(driver, Fromweek_input, From_week2);

		wait(driver, "2");
		clear(driver, Toweek_input);
		sendKeys(driver, Toweek_input, To_week2);
		wait(driver, "5");

//		Fluentwait(driver, Save);
//		click(driver, Save);
//		wait(driver, "2");
//		Fluentwait(driver, Click_Ok);
//		click(driver, Click_Ok);
//		wait(driver, "2");
		Fluentwait(driver, Show);
		click(driver, Show);

		wait(driver, "2");

		Fluentwait(driver, No_records_ok);
		click(driver, No_records_ok);

		wait(driver, "3");

		Fluentwait(driver, Tree_table);
		click(driver, Tree_table);

		Fluentwait(driver, Export_Excel);
		click(driver, Export_Excel);

		wait(driver, "10");

		boolean isDownloaded1 = isNewFileDownloaded(oldFiles, baseFilename);

		if (isDownloaded1 == true) {

			System.out.println("New excel file is downloaded without records");
			Extent_pass(driver, "New excel file is downloaded without records", test, test1);

		} else {
			System.out.println("New excel file is not downloaded due to without records");
			Extent_fail(driver, "New excel file is not downloaded due to without records", test, test1);
		}

		System.out.println("Is file downloaded: " + isDownloaded1);

		System.out.println("*****************Testcase 216 - Completed*******************");

		Extent_cal(test, "Testcase 221 - Ensure in Show button functionality");

		Fluentwait(driver, cancel_Op1);
		click(driver, cancel_Op1);

		Fluentwait(driver, Searchbox);
		sendKeys(driver, Searchbox, "Deficit and Surplus Location Identification");

		Fluentwait(driver, Selectdeficit);
		click(driver, Selectdeficit);

		wait(driver, "5");

		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "3");

		Fluentwait(driver, New);
		click(driver, New);
		wait(driver, "2");

		wait(driver, "2");

		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);
		wait(driver, "2");

		Fluentwait(driver, Fromweek_input);
		clear(driver, Fromweek_input);

		wait(driver, "2");
		sendKeys(driver, Fromweek_input, From_Week);

		wait(driver, "5");

		boolean showfunction = true;

		String Changeweek = getAttribute(driver, Fromweek_input, "value");

		if (Changeweek.equals(From_Week)) {

			System.out.println("Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek);
			Extent_pass(driver, "Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek,
					test, test1);

		} else {

			System.out
					.println("Not Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek);
			Extent_fail(driver,
					"Not Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek, test,
					test1);
			showfunction = false;
		}

		Fluentwait(driver, Toweek_input);
		clear(driver, Toweek_input);

		wait(driver, "2");
		sendKeys(driver, Toweek_input, To_Week);

		wait(driver, "5");
		String ChangeToweek = getAttribute(driver, Toweek_input, "value");

		if (ChangeToweek.equals(To_Week)) {

			System.out.println("Matched || Expected from year : " + To_Week + " Actual from year : " + ChangeToweek);
			Extent_pass(driver, "Matched || Expected from year : " + To_Week + " Actual from year : " + ChangeToweek,
					test, test1);

		} else {

			System.out
					.println("Not Matched || Expected from year : " + To_Week + " Actual from year : " + ChangeToweek);
			Extent_fail(driver,
					"Not Matched || Expected from year : " + To_Week + " Actual from year : " + ChangeToweek, test,
					test1);
			showfunction = false;
		}

		Fluentwait(driver, Show);
		click(driver, Show);
		wait(driver, "2");
		String year = getText(driver, To_popup1);
		if (year.equals(Year_pop)) {
			System.out.println("Matched || Expected from year : " + Year_pop + " Actual from year : " + year);
			Extent_pass(driver, "Matched || Expected from year : " + Year_pop + " Actual from year : " + year, test,
					test1);
		} else {
			System.out.println("Not Matched || Expected from year : " + Year_pop + " Actual from year : " + year);
			Extent_fail(driver, "Not Matched || Expected from year : " + Year_pop + " Actual from year : " + year, test,
					test1);
			showfunction = false;
		}

		if (showfunction) {
			Extent_pass(driver, "Show button is functioning correctly", test, test1);
		} else {
			Extent_fail(driver, "Show button is not functioning correctly", test, test1);
		}

		Fluentwait(driver, To_popup);
		click(driver, To_popup);

		wait(driver, "5");

		if (isDisplayed(driver, Warning_popup)) {
			System.out.println("popup shown");
			Fluentwait(driver, click_yes);
			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);

			Fluentwait(driver, Cancel);
			click(driver, Cancel);

			wait(driver, "2");
			Fluentwait(driver, New);
			click(driver, New);

			Fluentwait(driver, New_Popup_Yes);
			click(driver, New_Popup_Yes);
			wait(driver, "2");

			Fluentwait(driver, dropdown_option);
			click(driver, dropdown_option);

			Fluentwait(driver, Budget_Reposition);
			click(driver, Budget_Reposition);

			Fluentwait(driver, Budget);
			click(driver, Budget);

			wait(driver, "4");

//			uploadFileRobot(driver,EquimentType_Alphabets1);

			String upload_EquimentType_Alphabets2 = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe "
					+ EquimentType_Alphabets1;

			try {
				Runtime.getRuntime().exec(upload_EquimentType_Alphabets2);
			} catch (IOException e) {
				e.printStackTrace();
				System.out.println(e.getLocalizedMessage());
				Extent_fail(driver, e.getLocalizedMessage(), test, test1);
			}

			wait(driver, "10");

			Fluentwait(driver, Location3);

			if (isDisplayed(driver, click_yes)) {

				click(driver, click_yes);

				Fluentwait(driver, Click_ok);
				click(driver, Click_ok);
			}

			wait(driver, "3");
			Fluentwait(driver, ERO_Save);
			click(driver, ERO_Save);
			Fluentwait(driver, ERO_Save_ok);
			click(driver, ERO_Save_ok);
			wait(driver, "2");

		} else {
			System.out.println("popup not shown");
		}

		System.out.println("**************************Testcase 221 Completed **********************");

		Extent_cal(test, "Testcase 222 - Ensure in Show button functionality with no records displayed");

		wait(driver, "5");

		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "3");
		Fluentwait(driver, New);
		click(driver, New);
		wait(driver, "5");

		String pop3 = getText(driver, createnew_confirm_message);

		if (pop3.equals(Popup)) {
			System.out.println("Able to do the see the new  action in the popup");
			Extent_pass(driver, "Matched || Expected Id : " + Popup + " || Actual Id : " + pop3, test, test1);
		} else {
			Extent_fail(driver, "NotMatched || Expected Id : " + Popup + " || Actual Id : " + pop3, test, test1);
		}
		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);
		wait(driver, "2");

		Fluentwait(driver, Fromyear_input);
		click(driver, Year_Drop_Down);
		wait(driver, "2");
		click(driver, Year_Drop_Down);

		String ChangeYear = getAttribute(driver, Fromyear_input, "value");

		if (ChangeYear.equals(From_Year)) {

			System.out.println("Matched || Expected from year : " + From_Year + " Actual from year : " + ChangeYear);
			Extent_pass(driver, "Matched || Expected from year : " + From_Year + " Actual from year : " + ChangeYear,
					test, test1);

		} else {

			System.out
					.println("Not Matched || Expected from year : " + From_Year + " Actual from year : " + ChangeYear);
			Extent_fail(driver,
					"Not Matched || Expected from year : " + From_Year + " Actual from year : " + ChangeYear, test,
					test1);
		}
		wait(driver, "2");
		Fluentwait(driver, Fromweek_input);
		clear(driver, Fromweek_input);
		wait(driver, "2");
		sendKeys(driver, Fromweek_input, From_Week);

		wait(driver, "5");

		String Changeweek1 = getAttribute(driver, Fromweek_input, "value");

		if (Changeweek1.equals(From_Week)) {

			System.out.println("Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek1);
			Extent_pass(driver, "Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek1,
					test, test1);

		} else {

			System.out
					.println("Not Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek1);
			Extent_fail(driver,
					"Not Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek1, test,
					test1);
		}

		Fluentwait(driver, Toyear_input);

		click(driver, Year_To_Drop_Down);
		wait(driver, "2");
		click(driver, Year_To_Drop_Down);
		wait(driver, "5");
		String ChangeToYear = getAttribute(driver, Toyear_input, "value");

		if (ChangeToYear.equals(To_Year)) {

			System.out.println("Matched || Expected from year : " + To_Year + " Actual from year : " + ChangeToYear);
			Extent_pass(driver, "Matched || Expected from year : " + To_Year + " Actual from year : " + ChangeToYear,
					test, test1);

		} else {

			System.out
					.println("Not Matched || Expected from year : " + To_Year + " Actual from year : " + ChangeToYear);
			Extent_fail(driver,
					"Not Matched || Expected from year : " + To_Year + " Actual from year : " + ChangeToYear, test,
					test1);
		}

		Fluentwait(driver, Toweek_input);
		clear(driver, Toweek_input);
		wait(driver, "2");
		sendKeys(driver, Toweek_input, To_Week);
		wait(driver, "5");
		String ChangeToweek2 = getAttribute(driver, Toweek_input, "value");

		if (ChangeToweek2.equals(To_Week)) {

			System.out.println("Matched || Expected from year : " + To_Week + " Actual from year : " + ChangeToweek2);
			Extent_pass(driver, "Matched || Expected from year : " + To_Week + " Actual from year : " + ChangeToweek2,
					test, test1);

		} else {

			System.out
					.println("Not Matched || Expected from year : " + To_Week + " Actual from year : " + ChangeToweek2);
			Extent_fail(driver,
					"Not Matched || Expected from year : " + To_Week + " Actual from year : " + ChangeToweek2, test,
					test1);
		}
		Fluentwait(driver, Show);
		click(driver, Show);
		wait(driver, "2");
		String record = getText(driver, No_records);

		if (record.equals(No_record)) {

			Extent_pass(driver,
					"After click on show button user getting no records popup and the show button is functioning correctly",
					test, test1);
			System.out.println("Matched || Expected from year : " + No_record + " Actual from year : " + record);
			Extent_pass(driver, "Matched || Expected from year : " + No_record + " Actual from year : " + record, test,
					test1);

		} else {

			System.out.println("Not Matched || Expected from year : " + No_record + " Actual from year : " + record);
			Extent_fail(driver, "Not Matched || Expected from year : " + No_record + " Actual from year : " + record,
					test, test1);
		}

		Fluentwait(driver, No_records_ok);
		click(driver, No_records_ok);

		wait(driver, "5");
		if (isDisplayed(driver, Warning_popup)) {
			System.out.println("popup shown");
			Fluentwait(driver, click_yes);
			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);

			Fluentwait(driver, Cancel);
			click(driver, Cancel);

			wait(driver, "2");
			Fluentwait(driver, New);
			click(driver, New);

			Fluentwait(driver, New_Popup_Yes);
			click(driver, New_Popup_Yes);
			wait(driver, "2");

			Fluentwait(driver, dropdown_option);
			click(driver, dropdown_option);

			Fluentwait(driver, Budget_Reposition);
			click(driver, Budget_Reposition);

			Fluentwait(driver, Budget);
			click(driver, Budget);

			wait(driver, "4");

//			uploadFileRobot(driver,EquimentType_Alphabets1);

			String upload_EquimentType_Alphabets1 = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe "
					+ EquimentType_Alphabets1;

			try {
				Runtime.getRuntime().exec(upload_EquimentType_Alphabets1);
			} catch (IOException e) {
				e.printStackTrace();
				System.out.println(e.getLocalizedMessage());
				Extent_fail(driver, e.getLocalizedMessage(), test, test1);
			}

			wait(driver, "10");

			Fluentwait(driver, Location3);

			if (isDisplayed(driver, click_yes)) {

				click(driver, click_yes);

				Fluentwait(driver, Click_ok);
				click(driver, Click_ok);
			}

			wait(driver, "3");
			Fluentwait(driver, ERO_Save);
			click(driver, ERO_Save);
			Fluentwait(driver, ERO_Save_ok);
			click(driver, ERO_Save_ok);
			wait(driver, "2");

		} else {
			System.out.println("popup not shown");
		}

		System.out.println("***********************Testcase 222 Completed ***********");

		Extent_cal(test, "Testcase 224 - Ensure in save button functionality");

		Fluentwait(driver, cancel_Op3);
		click(driver, cancel_Op3);

		Fluentwait(driver, Searchbox);
		sendKeys(driver, Searchbox, "Deficit and Surplus Location Identification");

		Fluentwait(driver, Selectdeficit);
		click(driver, Selectdeficit);

		wait(driver, "5");

		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "3");

		Fluentwait(driver, New);
		click(driver, New);
		wait(driver, "2");

		wait(driver, "2");
		String pop4 = getText(driver, createnew_confirm_message);

		if (pop4.equals(Popup)) {
			System.out.println("Able to do the see the new  action in the popup");
			Extent_pass(driver, "Matched || Expected popup message : " + Popup + " || Actual popup message : " + pop4,
					test, test1);
		} else {
			Extent_fail(driver,
					"NotMatched || Expected popup message : " + Popup + " || Actual popup message : " + pop4, test,
					test1);
		}
		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);
		wait(driver, "2");

		Fluentwait(driver, Fromyear_input);
		click(driver, Year_Drop_Down);
		wait(driver, "2");

		String ChangeYear2 = getAttribute(driver, Fromyear_input, "value");

		if (ChangeYear2.equals(From_Year1)) {

			System.out.println("Matched || Expected from year : " + From_Year1 + " Actual from year : " + ChangeYear2);
			Extent_pass(driver, "Matched || Expected from year : " + From_Year1 + " Actual from year : " + ChangeYear2,
					test, test1);

		} else {

			System.out.println(
					"Not Matched || Expected from year : " + From_Year1 + " Actual from year : " + ChangeYear2);
			Extent_fail(driver,
					"Not Matched || Expected from year : " + From_Year1 + " Actual from year : " + ChangeYear2, test,
					test1);
		}
		wait(driver, "2");
		Fluentwait(driver, Fromweek_input);
		clear(driver, Fromweek_input);
		wait(driver, "2");
		sendKeys(driver, Fromweek_input, From_Week);

		wait(driver, "5");

		String Changeweek2 = getAttribute(driver, Fromweek_input, "value");

		if (Changeweek2.equals(From_Week)) {

			System.out.println("Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek2);
			Extent_pass(driver, "Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek2,
					test, test1);

		} else {

			System.out
					.println("Not Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek2);
			Extent_fail(driver,
					"Not Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek2, test,
					test1);
		}
		wait(driver, "2");
		Fluentwait(driver, Toyear_input);

		click(driver, Year_To_Drop_Down);
		wait(driver, "2");

		wait(driver, "5");
		String ChangeToYear2 = getAttribute(driver, Toyear_input, "value");

		if (ChangeToYear2.equals(To_Year1)) {

			System.out.println("Matched || Expected from year : " + To_Year1 + " Actual from year : " + ChangeToYear2);
			Extent_pass(driver, "Matched || Expected from year : " + To_Year1 + " Actual from year : " + ChangeToYear2,
					test, test1);

		} else {

			System.out.println(
					"Not Matched || Expected from year : " + To_Year1 + " Actual from year : " + ChangeToYear2);
			Extent_fail(driver,
					"Not Matched || Expected from year : " + To_Year1 + " Actual from year : " + ChangeToYear2, test,
					test1);
		}
		Fluentwait(driver, Toweek_input);
		clear(driver, Toweek_input);
		wait(driver, "2");
		sendKeys(driver, Toweek_input, To_Week);
		wait(driver, "5");
		String ChangeToweek3 = getAttribute(driver, Toweek_input, "value");

		if (ChangeToweek3.equals(To_Week)) {

			System.out.println("Matched || Expected from year : " + To_Week + " Actual from year : " + ChangeToweek3);
			Extent_pass(driver, "Matched || Expected from year : " + To_Week + " Actual from year : " + ChangeToweek3,
					test, test1);

		} else {

			System.out
					.println("Not Matched || Expected from year : " + To_Week + " Actual from year : " + ChangeToweek3);
			Extent_fail(driver,
					"Not Matched || Expected from year : " + To_Week + " Actual from year : " + ChangeToweek3, test,
					test1);
		}
		Fluentwait(driver, Show);
		click(driver, Show);
		wait(driver, "5");

		String pop5 = getText(driver, Saved_Pop3);

		if (pop5.equals(save_Popup)) {
			System.out.println("Matched || Expected popup message : " + save_Popup + " Actual popup message : " + pop5);
			Extent_pass(driver, "Matched || Expected popup message : " + save_Popup + " Actual popup message : " + pop5,
					test, test1);
		} else {
			System.out.println(
					"Not Matched || Expected popup message : " + save_Popup + " Actual popup message : " + pop5);
			Extent_fail(driver,
					"Not Matched || Expected popup message : " + save_Popup + " Actual popup message : " + pop5, test,
					test1);
		}

		wait(driver, "2");
		Fluentwait(driver, Saved_Yes_Option);
		click(driver, Saved_Yes_Option);

		wait(driver, "5");
		if (isDisplayed(driver, Warning_popup)) {
			System.out.println("popup shown");
			Fluentwait(driver, click_yes);
			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);

			Fluentwait(driver, Cancel);
			click(driver, Cancel);

			wait(driver, "2");
			Fluentwait(driver, New);
			click(driver, New);

			Fluentwait(driver, New_Popup_Yes);
			click(driver, New_Popup_Yes);
			wait(driver, "2");

			Fluentwait(driver, dropdown_option);
			click(driver, dropdown_option);

			Fluentwait(driver, Budget_Reposition);
			click(driver, Budget_Reposition);

			Fluentwait(driver, Budget);
			click(driver, Budget);

			wait(driver, "4");

//				uploadFileRobot(driver,EquimentType_Alphabets1);

			String upload_EquimentType_Alphabets1 = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe "
					+ EquimentType_Alphabets1;

			try {
				Runtime.getRuntime().exec(upload_EquimentType_Alphabets1);
			} catch (IOException e) {
				e.printStackTrace();
				System.out.println(e.getLocalizedMessage());
				Extent_fail(driver, e.getLocalizedMessage(), test, test1);
			}

			wait(driver, "10");

			Fluentwait(driver, Location3);

			if (isDisplayed(driver, click_yes)) {

				click(driver, click_yes);

				Fluentwait(driver, Click_ok);
				click(driver, Click_ok);
			}

			wait(driver, "3");
			Fluentwait(driver, ERO_Save);
			click(driver, ERO_Save);
			Fluentwait(driver, ERO_Save_ok);
			click(driver, ERO_Save_ok);
			wait(driver, "2");

		} else {
			System.out.println("popup not shown");
		}

		wait(driver, "2");

//		String Saved_Co = getText(driver, save_Conf);
//		if (Saved_Co.equals(save_Confo)) {
//			System.out.println("Matched || Expected save popup message : " + save_Confo + " Actual save popup message : " + Saved_Co);
//			Extent_pass(driver, "Matched || Expected save popup message : " + save_Confo + " Actual save popup message : " + Saved_Co,
//					test,test1);
//		} else {
//			System.out.println("Not Matched || Expected save popup message : " + save_Confo + " Actual save popup message : " + Saved_Co);
//			Extent_fail(driver,
//					"Not Matched || Expected save popup message : " + save_Confo + " Actual save popup message : " + Saved_Co, test,test1);
//		}
//		
//		Fluentwait(driver, saved_Conf_Ok);
//		click(driver, saved_Conf_Ok);
//		
		boolean savefun = true;

		if (IsElementEnabled(driver, IDField)) {

			System.out.println("After save the data's, the Id Field is in enable status");
			Extent_pass(driver, "After save the data's, the Id Field is in enable status", test, test1);

		} else {

			System.out.println("After save the data's, the Id Field is not in enable status");
			Extent_fail(driver, "After save the data's, the Id Field is not in enable status", test, test1);
			savefun = false;
		}

		wait(driver, "2");
		if (IsElementEnabled(driver, Map)) {

			System.out.println("After save the data's, the Map button is in enable status");
			Extent_pass(driver, "After save the data's, the Map button is in enable status", test, test1);

		} else {

			System.out.println("After save the data's, the Map button is not in enable status");
			Extent_fail(driver, "After save the data's, the Map button is not in enable status", test, test1);
			savefun = false;
		}
		wait(driver, "2");
		if (IsElementEnabled(driver, Route)) {

			System.out.println("After save the data's, the Route button is in enable status");
			Extent_pass(driver, "After save the data's, the Route button is in enable status", test, test1);

		} else {

			System.out.println("After save the data's, the Route button is not in enable status");
			Extent_fail(driver, "After save the data's, the Route button is not in enable status", test, test1);
			savefun = false;
		}

		if (savefun) {
			Extent_pass(driver, "Save button is functioning correctly", test, test1);
		} else {
			Extent_fail(driver, "Save button is not functioning correctly", test, test1);
		}

		System.out.println("**************************224**************");

		Extent_cal(test, "Testcase 225 - Ensure in Id Generated functionality");

		Fluentwait(driver, IDField);
		String GeneratedID = getAttribute(driver, IDField, "value");

		if (!GeneratedID.isEmpty()) {
			System.out.println("Once the data's are saved, ID is autogenerated");
			Extent_pass(driver, "Once the data's are saved, ID is autogenerated", test, test1);
		} else {

			System.out.println("Once the data's are saved, ID is not autogenerated");
			Extent_fail(driver, "Once the data's are saved, ID is not autogenerated", test, test1);
		}

		String ID_Backroundcolor = getTextBackgroundColor(driver, IDField);

		System.out.println("Fromyear_Backroundcolor : " + ID_Backroundcolor);

		if (ID_Backroundcolor.equals(Expected_Autogeneratedcolorcode)) {

			System.out.println("Id field Background color Matched || Expected ID field color was : "
					+ Expected_Autogeneratedcolorcode + " || Actual ID field color was " + ID_Backroundcolor);
			Extent_pass(driver,
					"Id field Background color Matched || Expected ID field color was : "
							+ Expected_Autogeneratedcolorcode + " || Actual ID field color was " + ID_Backroundcolor,
					test, test1);
		} else {
			System.out.println("Id field Background color Not Matched || Expected ID field color was : "
					+ Expected_Autogeneratedcolorcode + " || Actual ID field color was " + ID_Backroundcolor);
			Extent_fail(driver,
					"Id field Background color Not Matched || Expected ID field color was : "
							+ Expected_Autogeneratedcolorcode + " || Actual ID field color was " + ID_Backroundcolor,
					test, test1);
		}

		Extent_cal(test,
				"Testcase 227 - Ensure in View Map button functionality without navigate Graphical view screen");

		wait(driver, "2");
		Fluentwait(driver, Map);
		click(driver, Map);

		wait(driver, "5");

		boolean viewmap = true;

		wait(driver, "2");
		if (!isDisplayed(driver, surplus)) {
			System.out.println("After opening the map screen, the surplus is not  displayed");
			Extent_pass(driver, "After opening the map screen, the surplus is not  displayed", test, test1);
		} else {

			System.out.println("After opening the map screen, the surplus is displayed");
			Extent_fail(driver, "After opening the map screen, the surplus is displayed", test, test1);
			viewmap = false;
		}
		wait(driver, "2");
		if (!isDisplayed(driver, Deficit)) {
			System.out.println("After opening the map screen, the Deficit is not  displayed");
			Extent_pass(driver, "After opening the map screen, the Deficit is not  displayed", test, test1);
		} else {
			System.out.println("After opening the map screen, the Deficit is displayed");
			Extent_fail(driver, "After opening the map screen, the Deficit is displayed", test, test1);
			viewmap = false;
		}
		wait(driver, "2");
		if (!isDisplayed(driver, Neutral)) {

			System.out.println("After opening the map screen, the Neutral is displayed");
			Extent_pass(driver, "After opening the map screen, the Neutral is displayed", test, test1);

		} else {
			System.out.println("After opening the map screen, the Neutral is not  displayed");
			Extent_fail(driver, "After opening the map screen, the Neutral is not  displayed", test, test1);

			viewmap = false;
		}

		if (viewmap) {
			System.out.println("After click on the view map button, screen not navigated to the graphical screen");
			Extent_pass(driver, "After click on the view map button, screen not navigated to the graphical screen",
					test, test1);
		} else {
			System.out.println("After click on the view map button, screen navigated to the graphical screen");
			Extent_fail(driver, "After click on the view map button, screen navigated to the graphical screen", test,
					test1);
		}

		Fluentwait(driver, Closemap);
		click(driver, Closemap);

		System.out.println("Testcase 227 Completed");

		Extent_cal(test,
				"Testcase 228 - Ensure in View Map button functionality  navigate Graphical view screen and without displayed Deficit and surplus ports");

		wait(driver, "5");
		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "5");

		if (!IsElementEnabled(driver, Map)) {

			System.out.println("Without ports, View map button is disabled");
			Extent_pass(driver, "Without ports, View map button is disabled", test, test1);
		} else {
			click(driver, Map);
			System.out.println(
					"Without ports, View map button is enabled and after click the map button, graphical view screen is displayed");
			Extent_fail(driver,
					"Without ports, View map button is enabled and after click the map button, graphical view screen is displayed",
					test, test1);
		}

		System.out.println("Testcase 228 completed");

		Extent_cal(test, "Testcase 229 -Ensure in Create Route button functionality");

		Fluentwait(driver, Deficittab);
		click(driver, Deficittab);

		Fluentwait(driver, Cancel_option);
		click(driver, Cancel_option);

		Fluentwait(driver, Searchbox);
		sendKeys(driver, Searchbox, "Deficit and Surplus Location Identification");

		Fluentwait(driver, Selectdeficit);
		click(driver, Selectdeficit);

		wait(driver, "5");
		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "3");

		Fluentwait(driver, New);
		click(driver, New);
		wait(driver, "2");

		wait(driver, "2");
		String popUp = getText(driver, createnew_confirm_message);

		if (popUp.equals(Popup)) {
			System.out.println("Able to do the see the new  action in the popup");
			Extent_pass(driver, "Matched || Expected Id : " + Popup + " || Actual Id : " + popUp, test, test1);
		} else {
			Extent_fail(driver, "NotMatched || Expected Id : " + Popup + " || Actual Id : " + popUp, test, test1);
		}
		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);
		wait(driver, "2");

		Fluentwait(driver, Fromyear_input);
		click(driver, Year_Drop_Down);
		wait(driver, "2");

		String ChangeYear4 = getAttribute(driver, Fromyear_input, "value");

		if (ChangeYear4.equals(From_Year1)) {

			System.out.println("Matched || Expected from year : " + From_Year1 + " Actual from year : " + ChangeYear4);
			Extent_pass(driver, "Matched || Expected from year : " + From_Year1 + " Actual from year : " + ChangeYear4,
					test, test1);

		} else {

			System.out.println(
					"Not Matched || Expected from year : " + From_Year1 + " Actual from year : " + ChangeYear4);
			Extent_fail(driver,
					"Not Matched || Expected from year : " + From_Year1 + " Actual from year : " + ChangeYear4, test,
					test1);
		}

		wait(driver, "2");
		Fluentwait(driver, Fromweek_input);
		clear(driver, Fromweek_input);

		wait(driver, "2");
		sendKeys(driver, Fromweek_input, From_Week);

		wait(driver, "5");

		String Changeweek4 = getAttribute(driver, Fromweek_input, "value");

		if (Changeweek4.equals(From_Week)) {

			System.out.println("Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek4);
			Extent_pass(driver, "Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek4,
					test, test1);

		} else {

			System.out
					.println("Not Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek4);
			Extent_fail(driver,
					"Not Matched || Expected from week : " + From_Week + " Actual from week : " + Changeweek4, test,
					test1);
		}
		wait(driver, "2");
		Fluentwait(driver, Toyear_input);

		click(driver, Year_To_Drop_Down);

		wait(driver, "5");
		String ChangeToYear4 = getAttribute(driver, Toyear_input, "value");

		if (ChangeToYear4.equals(To_Year1)) {

			System.out.println("Matched || Expected from year : " + To_Year1 + " Actual from year : " + ChangeToYear4);
			Extent_pass(driver, "Matched || Expected from year : " + To_Year1 + " Actual from year : " + ChangeToYear4,
					test, test1);

		} else {

			System.out.println(
					"Not Matched || Expected from year : " + To_Year1 + " Actual from year : " + ChangeToYear4);
			Extent_fail(driver,
					"Not Matched || Expected from year : " + To_Year1 + " Actual from year : " + ChangeToYear4, test,
					test1);
		}
		Fluentwait(driver, Toweek_input);
		clear(driver, Toweek_input);
		wait(driver, "2");
		sendKeys(driver, Toweek_input, To_Week);
		wait(driver, "5");
		String ChangeToweek5 = getAttribute(driver, Toweek_input, "value");

		if (ChangeToweek5.equals(To_Week)) {

			System.out.println("Matched || Expected to week : " + To_Week + " Actual to week : " + ChangeToweek5);
			Extent_pass(driver, "Matched || Expected to week : " + To_Week + " Actual to week : " + ChangeToweek5, test,
					test1);

		} else {

			System.out.println("Not Matched || Expected to week : " + To_Week + " Actual to week : " + ChangeToweek5);
			Extent_fail(driver, "Not Matched || Expected to week : " + To_Week + " Actual to week : " + ChangeToweek5,
					test, test1);
		}
		Fluentwait(driver, Show);
		click(driver, Show);
		wait(driver, "5");
		String popup = getText(driver, Saved_Pop3);

		if (popup.equals(save_Popup)) {
			System.out.println(
					"Matched || Expected show popup message : " + save_Popup + " Actual show popup message : " + popup);
			Extent_pass(driver,
					"Matched || Expected show popup message : " + save_Popup + " Actual show popup message : " + popup,
					test, test1);
		} else {
			System.out.println("Not Matched || Expected show popup message : " + save_Popup
					+ " Actual show popup message : " + popup);
			Extent_fail(driver, "Not Matched || Expected show popup message : " + save_Popup
					+ " Actual show popup message : " + popup, test, test1);
		}
		wait(driver, "2");
		Fluentwait(driver, Saved_Yes_Option);
		click(driver, Saved_Yes_Option);

		wait(driver, "5");
		if (isDisplayed(driver, Warning_popup)) {
			System.out.println("popup shown");
			Fluentwait(driver, click_yes);
			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);

			Fluentwait(driver, Cancel);
			click(driver, Cancel);

			wait(driver, "2");
			Fluentwait(driver, New);
			click(driver, New);

			Fluentwait(driver, New_Popup_Yes);
			click(driver, New_Popup_Yes);
			wait(driver, "2");

			Fluentwait(driver, dropdown_option);
			click(driver, dropdown_option);

			Fluentwait(driver, Budget_Reposition);
			click(driver, Budget_Reposition);

			Fluentwait(driver, Budget);
			click(driver, Budget);

			wait(driver, "4");

//			uploadFileRobot(driver,EquimentType_Alphabets1);

			String upload_EquimentType_Alphabets1 = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe "
					+ EquimentType_Alphabets1;

			try {
				Runtime.getRuntime().exec(upload_EquimentType_Alphabets1);
			} catch (IOException e) {
				e.printStackTrace();
				System.out.println(e.getLocalizedMessage());
				Extent_fail(driver, e.getLocalizedMessage(), test, test1);
			}

			wait(driver, "10");

			Fluentwait(driver, Location3);

			if (isDisplayed(driver, click_yes)) {

				click(driver, click_yes);

				Fluentwait(driver, Click_ok);
				click(driver, Click_ok);
			}

			wait(driver, "3");
			Fluentwait(driver, ERO_Save);
			click(driver, ERO_Save);
			Fluentwait(driver, ERO_Save_ok);
			click(driver, ERO_Save_ok);
			wait(driver, "2");

		} else {
			System.out.println("popup not shown");
		}

		wait(driver, "2");

//		wait(driver, "5");
//		Fluentwait(driver, Save);
//		click(driver, Save);
//		wait(driver, "2");
//		String Saved_Co2 = getText(driver, save_Conf);
//		if (Saved_Co2.equals(save_Confo)) {
//			System.out.println("Matched || Expected save popup message : " + save_Confo + " Actual save popup message : " + Saved_Co2);
//			Extent_pass(driver, "Matched || Expected save popup message : " + save_Confo + " Actual save popup message : " + Saved_Co2,
//					test,test1);
//		} else {
//			System.out
//					.println("Not Matched || Expected save popup message : " + save_Confo + " Actual save popup message : " + Saved_Co2);
//			Extent_fail(driver,
//					"Not Matched || Expected save popup message : " + save_Confo + " Actual save popup message : " + Saved_Co2, test,test1);
//			global = "NotMatched || Expected show popup message : "+ save_Confo + " || Actual show popup message : " + Saved_Co2  ;
//		}
//		
//		Fluentwait(driver, saved_Conf_Ok);
//		click(driver, saved_Conf_Ok);
//	
		Fluentwait(driver, Route);
		click(driver, Route);

		List<String> columnnames = Arrays.asList("origin", "delivery", "sizetype", "cost", "mainservice", "sOrgMode",
				"pOL", "pOLter", "pOLservice", "trans1", "trans1ser");

		int size = columnnames.size();

		for (int i = 0; i < size; i++) {

			String columnname = columnnames.get(i);

			wait(driver, "3");

			WebElement columns = driver.findElement(By.xpath("(//div[@col-id='" + columnname + "'])[2]"));

			act.moveToElement(columns).build().perform();

			wait(driver, "2");

			if (isDisplayed1(driver, columns)) {

				System.out
						.println("After navigated to routing screen, Records of the " + columnname + " was displayed");
				Extent_pass(driver,
						"After navigated to routing screen, Records of the " + columnname + " was displayed", test,
						test1);

			} else {

				System.out.println(
						"After navigated to routing screen, Records of the " + columnname + " was not displayed");
				Extent_fail(driver,
						"After navigated to routing screen, Records of the " + columnname + " was not displayed", test,
						test1);

			}
		}

		System.out.println("*******************229*************");

		Extent_cal(test,
				"Testcase 230 - Ensure in Create Route button functionality  without navigate ERO Routing screen");

		Fluentwait(driver, Close_routing);
		click(driver, Close_routing);

		Fluentwait(driver, Deficittab);
		click(driver, Deficittab);

		Fluentwait(driver, Route);
		click(driver, Route);

		if (!isDisplayed(driver, Ero_ID_Field)) {

			System.out.println("After click on route button, deficit and surplus screen only showing");
			Extent_fail(driver, "After click on create route button, deficit and surplus screen only showing", test,
					test1);

		} else {
			System.out.println("After click on route button, its navigated to ERO Routing screen");
			Extent_pass(driver, "After click on route button, its navigated to ERO Routing screen", test, test1);

		}

		System.out.println("Testcase 230 completed");

		Extent_cal(test,
				"Testcase 231 - Ensure in Create Route button functionality  navigate ERO Routing screen and without displayed records");

		Fluentwait(driver, Deficittab);
		click(driver, Deficittab);

		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "3");

		Fluentwait(driver, New);
		click(driver, New);

		Fluentwait(driver, createnew_confirm);
		click(driver, createnew_confirm);

		Fluentwait(driver, Fromyear_input);
		click(driver, Year_Drop_Down);
		wait(driver, "2");
		click(driver, Year_Drop_Down);
		wait(driver, "2");
		click(driver, Year_Drop_Down);
		wait(driver, "2");
		click(driver, Year_Drop_Down);
		wait(driver, "2");
		click(driver, Year_Drop_Down);
		wait(driver, "2");
		click(driver, Year_Drop_Down);
		Fluentwait(driver, Year_To_Drop_Down);

		click(driver, Year_To_Drop_Down);
		wait(driver, "2");
		click(driver, Year_To_Drop_Down);
		wait(driver, "5");
		wait(driver, "2");
		click(driver, Year_To_Drop_Down);
		wait(driver, "2");
		click(driver, Year_To_Drop_Down);
		wait(driver, "2");
		click(driver, Year_To_Drop_Down);
		wait(driver, "2");
		click(driver, Year_To_Drop_Down);

		Fluentwait(driver, Show);
		click(driver, Show);

		wait(driver, "4");

		Fluentwait(driver, No_records_ok);
		click(driver, No_records_ok);

		wait(driver, "5");

		if (isDisplayed(driver, Saved_Yes_Option)) {
			Fluentwait(driver, Saved_Yes_Option);
			click(driver, Saved_Yes_Option);
		}

		if (IsElementEnabled(driver, Route)) {

			System.out.println("Route button is enable status, even no records displayed");
			Extent_pass(driver, "Route button is enable status, even no records displayed", test, test1);
		} else {

			System.out.println(
					"Unable to navigate to the ero routing screen, the route button is not in enable status when no records are displayed");
			Extent_fail(driver,
					"Unable to navigate to the ero routing screen, the route button is not in enable status when no records are displayed",
					test, test1);
		}

		System.out.println("Testcase 231 completed");

		Extent_cal(test, "Testcase 235- Ensure in Global search button functionality ");

		Fluentwait(driver, Route_Cancel);
		click(driver, Route_Cancel);

		wait(driver, "2");
		Fluentwait(driver, Globalserach);
		click(driver, Globalserach);
		sendKeys(driver, Globalserach_IDInput, Search_Id);

		Fluentwait(driver, Click_Search);
		click(driver, Click_Search);

		wait(driver, "2");
		doubleClick(driver, SelectID);

		wait(driver, "3");
		String id_value = getAttribute(driver, IDField, "value");
		System.out.println(id_value);
		wait(driver, "2");

		if (id_value.equals(Search_Id)) {
			System.out.println("Matched || Expected After navigated searched records was displayed: " + Search_Id
					+ " Actual  After navigated searched records was displayed : " + id_value);
			Extent_pass(driver, "Matched ||Expected After navigated searched records  was displayed : " + Search_Id
					+ " Actual After navigated searched records was displayed: " + id_value, test, test1);
		} else {
			System.out.println("Not Matched ||After navigated searched records was  not displayed: " + Search_Id
					+ " After navigated searched records was  not displayed  : " + id_value);
			Extent_fail(driver, "Not Matched ||After navigated searched records was  not displayed: " + Search_Id
					+ " Actual After navigated searched records was  not displayed : " + id_value, test, test1);
		}

		System.out.println("*****************235**************");

		Extent_cal(test, "Testcase 232 -Ensure in edit button functionality");

		wait(driver, "2");
		Fluentwait(driver, Globalserach);

		click(driver, Globalserach);
		sendKeys(driver, Globalserach_IDInput, Search_Id);

		Fluentwait(driver, Click_Search);
		click(driver, Click_Search);
		wait(driver, "2");

		doubleClick(driver, SelectID);

		wait(driver, "5");

		Fluentwait(driver, Editbutton);
		click(driver, Editbutton);

		Fluentwait(driver, Save);
		click(driver, Save);

		wait(driver, "5");
		String Edit_save = getText(driver, Edit_Save);
		if (Edit_save.equals(Edited_save)) {
			System.out.println("Deficit and Surplus Location Details Updated");
			Extent_pass(driver, "Matched || Expected save popup message : " + Edited_save
					+ " || Actual save popup message : " + Edit_save, test, test1);
		} else {
			Extent_fail(driver, "Not Matched || Expected save popup message : " + Edited_save
					+ " || Actual save popup message : " + Edit_save, test, test1);
		}

		Fluentwait(driver, Click_Ok);
		click(driver, Click_Ok);

		Fluentwait(driver, Closetab);
		click(driver, Closetab);

		System.out.println("*****************232*********");

		wait(driver, "2");
		Extent_cal(test, "Testcase 233- Ensure in Refresh button functionality ");

		Fluentwait(driver, Searchbox);
		sendKeys(driver, Searchbox, "Deficit and Surplus Location Identification");

		wait(driver, "2");
		Fluentwait(driver, Selectdeficit);
		click(driver, Selectdeficit);

		wait(driver, "5");
		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "2");
		Fluentwait(driver, New);
		click(driver, New);

		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);

		wait(driver, "2");
		Fluentwait(driver, Show);
		click(driver, Show);

		wait(driver, "5");

		if (isDisplayed(driver, Saved_Yes_Option)) {
			Fluentwait(driver, Saved_Yes_Option);
			click(driver, Saved_Yes_Option);
		}
		wait(driver, "2");

//		Fluentwait(driver, Save);
//		click(driver, Save);
//		wait(driver, "2");
//
//		Fluentwait(driver, saved_Conf_Ok);
//		click(driver, saved_Conf_Ok);
		wait(driver, "5");
		if (isDisplayed(driver, Warning_popup)) {
			System.out.println("popup shown");
			Fluentwait(driver, click_yes);
			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);

			Fluentwait(driver, Cancel);
			click(driver, Cancel);

			wait(driver, "2");
			Fluentwait(driver, New);
			click(driver, New);

			Fluentwait(driver, New_Popup_Yes);
			click(driver, New_Popup_Yes);
			wait(driver, "2");

			Fluentwait(driver, dropdown_option);
			click(driver, dropdown_option);

			Fluentwait(driver, Budget_Reposition);
			click(driver, Budget_Reposition);

			Fluentwait(driver, Budget);
			click(driver, Budget);

			wait(driver, "4");

//				uploadFileRobot(driver,EquimentType_Alphabets1);

			String upload_EquimentType_Alphabets1 = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe "
					+ EquimentType_Alphabets1;

			try {
				Runtime.getRuntime().exec(upload_EquimentType_Alphabets1);
			} catch (IOException e) {
				e.printStackTrace();
				System.out.println(e.getLocalizedMessage());
				Extent_fail(driver, e.getLocalizedMessage(), test, test1);
			}

			wait(driver, "10");

			Fluentwait(driver, Location3);

			if (isDisplayed(driver, click_yes)) {

				click(driver, click_yes);

				Fluentwait(driver, Click_ok);
				click(driver, Click_ok);
			}

			wait(driver, "3");
			Fluentwait(driver, ERO_Save);
			click(driver, ERO_Save);
			Fluentwait(driver, ERO_Save_ok);
			click(driver, ERO_Save_ok);
			wait(driver, "2");

		} else {
			System.out.println("popup not shown");
		}

		Fluentwait(driver, Editbutton);
		click(driver, Editbutton);

//		Fluentwait(driver, Refresh);
//		click(driver, Refresh);
//
//		wait(driver, "3");

//		String refresh_popup = getText(driver, Refresh_pop);
//	
//		if (refresh_popup.equals(Refresh_val)) {
//			System.out.println("Matched || Expected refresh popup message  : " + Refresh_val + " Actual refresh popup message : " + refresh_popup);
//			Extent_pass(driver, "Matched || Expected refresh popup message: " + Refresh_val + " Actual refresh popup message : " + refresh_popup, test,test1);
//		} else {
//			System.out.println("Not Matched || Expected refresh popup message  : " + Refresh_val + " Actual refresh popup message : " + refresh_popup);
//			Extent_fail(driver, "Not Matched || Expected refresh popup message: " + Refresh_val + " Actual refresh popup message : " + refresh_popup,
//					test,test1);
//			global = "Not Matched ||Expected refresh popup message  : " + Refresh_val+"  Actual refresh popup message  : " + refresh_popup ;
//		}
//		
//		Fluentwait(driver, Refresh_pop_no);
//		click(driver, Refresh_pop_no);

		System.out.println("*****************233*********");

		Fluentwait(driver, Closetab);
		click(driver, Closetab);

		Extent_cal(test, "Testcase 234- Ensure in Refresh button functionality with yes button");// popup not showed
		Fluentwait(driver, Searchbox);
		sendKeys(driver, Searchbox, "Deficit and Surplus Location Identification");

		wait(driver, "2");
		Fluentwait(driver, Selectdeficit);
		click(driver, Selectdeficit);

		wait(driver, "5");
		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "2");
		Fluentwait(driver, New);
		click(driver, New);

		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);

		wait(driver, "2");
		Fluentwait(driver, Show);
		click(driver, Show);
		wait(driver, "5");

//		String popup_valu = getText(driver, Saved_Pop3);
//
//		if (popup_valu.equals(save_Popup)) {
//			System.out.println("Matched || Expected show popup message : " + save_Popup + " Actual show popup message : " + popup_valu);
//			Extent_pass(driver, "Matched || Expected show popup message : " + save_Popup + " Actual show popup message : " + popup_valu,
//					test,test1);
//		} else {
//			System.out
//					.println("Not Matched || Expected show popup message : " + save_Popup + " Actual show popup message : " + popup_valu);
//			Extent_fail(driver,
//					"Not Matched || Expected show popup message : " + save_Popup + " Actual show popup message : " + popup_valu, test,test1);
//			global = "Not Matched ||Expected show popup message  : " + save_Popup+"  Actual show popup message  : " + popup_valu ;
//		}
//		
//		wait(driver, "2");
//		Fluentwait(driver, Saved_Yes_Option);
//		click(driver, Saved_Yes_Option);
//		
//		Fluentwait(driver, Save);
//		click(driver, Save);
//		wait(driver, "2");
//
//		Fluentwait(driver, saved_Conf_Ok);
//		click(driver, saved_Conf_Ok);

		Fluentwait(driver, show_yes);
		click(driver, show_yes);

		wait(driver, "5");

		if (isDisplayed(driver, Warning_popup)) {

			System.out.println("popup shown");
			Fluentwait(driver, click_yes);
			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);

			Fluentwait(driver, Cancel);
			click(driver, Cancel);

			wait(driver, "2");
			Fluentwait(driver, New);
			click(driver, New);

			Fluentwait(driver, New_Popup_Yes);
			click(driver, New_Popup_Yes);
			wait(driver, "2");

			Fluentwait(driver, dropdown_option);
			click(driver, dropdown_option);

			Fluentwait(driver, Budget_Reposition);
			click(driver, Budget_Reposition);

			Fluentwait(driver, Budget);
			click(driver, Budget);

			wait(driver, "4");

//			uploadFileRobot(driver,EquimentType_Alphabets1);

			String upload_EquimentType_Alphabets1 = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe "
					+ EquimentType_Alphabets1;

			try {
				Runtime.getRuntime().exec(upload_EquimentType_Alphabets1);
			} catch (IOException e) {
				e.printStackTrace();
				System.out.println(e.getLocalizedMessage());
				Extent_fail(driver, e.getLocalizedMessage(), test, test1);
			}

			wait(driver, "10");

			Fluentwait(driver, Location3);

			if (isDisplayed(driver, click_yes)) {

				click(driver, click_yes);

				Fluentwait(driver, Click_ok);
				click(driver, Click_ok);
			}

			wait(driver, "3");
			Fluentwait(driver, ERO_Save);
			click(driver, ERO_Save);

			Fluentwait(driver, ERO_Save_ok);
			click(driver, ERO_Save_ok);
			wait(driver, "2");

		} else {
			System.out.println("popup not shown");
		}

		Fluentwait(driver, Editbutton);
		click(driver, Editbutton);

		Fluentwait(driver, Refresh);
		click(driver, Refresh);

		wait(driver, "5");

//		String refresh_popup1 = getText(driver, Refresh_pop);
//		if (refresh_popup1.equals(Refresh_val)) {
//			System.out.println("Matched || Expected popup message  : " + Refresh_val + " Actual popup message : " + refresh_popup1);
//			Extent_pass(driver, "Matched || Expected popup message: " + Refresh_val + " Actual popup message : " + refresh_popup1,
//					test,test1);
//		} else {
//			System.out.println("Not Matched || Expected popup message  : " + Refresh_val + " Actual popup message : " + refresh_popup1);
//			Extent_fail(driver, "Not Matched || Expected popup message: " + Refresh_val + " Actual popup message : " + refresh_popup1,
//					test,test1);
//			global = "Not Matched ||Expected show popup message  : " + Refresh_val+"  Actual  popup message  : " + refresh_popup1 ;
//		}
//		Fluentwait(driver, Refresh_pop_Yes);
//		click(driver, Refresh_pop_Yes);

		System.out.println("*****************234*********");

		Fluentwait(driver, Closetab);
		click(driver, Closetab);

		Extent_cal(test, "Testcase 236- Ensure in Cancel button functionality ");

		Fluentwait(driver, Searchbox);
		sendKeys(driver, Searchbox, "Deficit and Surplus Location Identification");

		wait(driver, "2");
		Fluentwait(driver, Selectdeficit);
		click(driver, Selectdeficit);

		wait(driver, "2");
		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "5");
		takescreenshot(driver, "/Expected_screenshot/Deficit/Deficit_homePage");

		takescreenshot(driver, "/Actual_screenshot/Deficit/Deficit_homePage");

		try {
			boolean chartDiff = imageComparison2(driver, "/Deficit/Deficit_homePage", "/Deficit/Deficit_homePage");
			wait(driver, "2");
			if (chartDiff == true) {
				Extent_pass(driver, "Home page is displayed in default view", test, test1);

			} else {
				Extent_fail(driver, "Home page is  not displayed in default view", test, test1);
			}
		} catch (Exception e1) {
			Extent_fail(driver, "Unable to compare the Images for Deficit home page", test, test1);
		}

		System.out.println("******************236***************");

		wait(driver, "2");
		Fluentwait(driver, New);
		click(driver, New);

		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);
		wait(driver, "2");

		Extent_cal(test, "Testcase 226- Ensure in View Map button functionality  ");

		wait(driver, "2");
		Fluentwait(driver, Year_Drop_Down);
		click(driver, Year_Drop_Down);

		Fluentwait(driver, Fromweek_input);
		clear(driver, Fromweek_input);
		sendKeys(driver, Fromweek_input, From_Week);
		wait(driver, "2");

		Fluentwait(driver, Year_To_Drop_Down);
		click(driver, Year_To_Drop_Down);

		wait(driver, "2");
		Fluentwait(driver, Toweek_input);
		clear(driver, Toweek_input);
		sendKeys(driver, Toweek_input, To_Week);

		Fluentwait(driver, Show);
		click(driver, Show);

		wait(driver, "2");
		Fluentwait(driver, show_yes);
		click(driver, show_yes);
		wait(driver, "5");
		if (isDisplayed(driver, Warning_popup)) {
			System.out.println("popup shown");
			Fluentwait(driver, click_yes);
			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);

			Fluentwait(driver, Cancel);
			click(driver, Cancel);

			wait(driver, "2");
			Fluentwait(driver, New);
			click(driver, New);

			Fluentwait(driver, New_Popup_Yes);
			click(driver, New_Popup_Yes);
			wait(driver, "2");

			Fluentwait(driver, dropdown_option);
			click(driver, dropdown_option);

			Fluentwait(driver, Budget_Reposition);
			click(driver, Budget_Reposition);

			Fluentwait(driver, Budget);
			click(driver, Budget);

			wait(driver, "4");

//			uploadFileRobot(driver,EquimentType_Alphabets1);

			String upload_EquimentType_Alphabets1 = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe "
					+ EquimentType_Alphabets1;

			try {
				Runtime.getRuntime().exec(upload_EquimentType_Alphabets1);
			} catch (IOException e) {
				e.printStackTrace();
				System.out.println(e.getLocalizedMessage());
				Extent_fail(driver, e.getLocalizedMessage(), test, test1);
			}

			wait(driver, "10");

			Fluentwait(driver, Location3);

			if (isDisplayed(driver, click_yes)) {

				click(driver, click_yes);

				Fluentwait(driver, Click_ok);
				click(driver, Click_ok);
			}

			wait(driver, "3");
			Fluentwait(driver, ERO_Save);
			click(driver, ERO_Save);
			Fluentwait(driver, ERO_Save_ok);
			click(driver, ERO_Save_ok);
			wait(driver, "2");

		} else {
			System.out.println("popup not shown");
		}

//		wait(driver, "2");
//		Fluentwait(driver, Save);
//		click(driver, Save);
//	
//		Fluentwait(driver, Save_popup_ok);
//		click(driver, Save_popup_ok);

		wait(driver, "2");
		Fluentwait(driver, Map);
		click(driver, Map);

		wait(driver, "2");
		if (isDisplayed(driver, surplus)) {

			System.out.println("After opening the map screen, the surplus is displayed");
			Extent_pass(driver, "After opening the map screen, the surplus is displayed", test, test1);
		} else {
			System.out.println("After opening the map screen, the surplus is not  displayed");
			Extent_fail(driver, "After opening the map screen, the surplus is not  displayed", test, test1);
		}
		wait(driver, "2");
		if (isDisplayed(driver, Deficit)) {

			System.out.println("After opening the map screen, the Deficit is displayed");
			Extent_pass(driver, "After opening the map screen, the Deficit is displayed", test, test1);
		} else {
			System.out.println("After opening the map screen, the Deficit is not  displayed");
			Extent_fail(driver, "After opening the map screen, the Deficit is not  displayed", test, test1);
		}
		wait(driver, "2");
		if (isDisplayed(driver, Neutral)) {

			System.out.println("After opening the map screen, the Neutral is displayed");
			Extent_pass(driver, "After opening the map screen, the Neutral is displayed", test, test1);
		} else {
			System.out.println("After opening the map screen, the Neutral is not  displayed");
			Extent_fail(driver, "After opening the map screen, the Neutral is not  displayed", test, test1);
		}

		Extent_cal(test,
				"Testcase 227- Ensure in View Map button functionality  navigate Graphical view screen and without displayed Deficit and surplus ports  ");

		Fluentwait(driver, Deficittab);
		click(driver, Deficittab);

		Fluentwait(driver, Cancel);
		click(driver, Cancel);
		wait(driver, "2");
		Fluentwait(driver, New);
		click(driver, New);
		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);
		wait(driver, "2");

		wait(driver, "2");
		Fluentwait(driver, Year_Drop_Down);
		click(driver, Year_Drop_Down);

		wait(driver, "2");
		Fluentwait(driver, Year_Drop_Down);
		click(driver, Year_Drop_Down);

		Fluentwait(driver, Fromweek_input);
		clear(driver, Fromweek_input);
		sendKeys(driver, Fromweek_input, From_Week);
		wait(driver, "2");

		Fluentwait(driver, Year_To_Drop_Down);
		click(driver, Year_To_Drop_Down);
		wait(driver, "2");

		Fluentwait(driver, Year_To_Drop_Down);
		click(driver, Year_To_Drop_Down);

		wait(driver, "2");
		Fluentwait(driver, Toweek_input);
		clear(driver, Toweek_input);
		sendKeys(driver, Toweek_input, To_Week);

		Fluentwait(driver, Show);
		click(driver, Show);
		wait(driver, "2");

		Fluentwait(driver, No_records_ok);
		click(driver, No_records_ok);

		wait(driver, "2");
		Fluentwait(driver, Save);
		click(driver, Save);

		Fluentwait(driver, No_record_Ok);
		click(driver, No_record_Ok);

		wait(driver, "2");
		Fluentwait(driver, Map);

		if (IsElementEnabled(driver, Map)) {
			click(driver, Map);
			if (isDisplayed(driver, surplus)) {
				Extent_fail(driver, "After opening the map screen, the surplus is  displayed", test, test1);
			} else {
				Extent_pass(driver, "After opening the map screen, the surplus is  not displayed", test, test1);
			}
			if (isDisplayed(driver, Deficit)) {
				Extent_fail(driver, "After opening the map screen, the Deficit is  displayed", test, test1);
			} else {
				Extent_pass(driver, "After opening the map screen, the Deficit is  not displayed", test, test1);
			}
			if (isDisplayed(driver, Neutral)) {
				Extent_fail(driver, "After opening the map screen, the Neutral is  displayed", test, test1);
			} else {
				Extent_pass(driver, "After opening the map screen, the Neutral is  not displayed", test, test1);
			}

		} else {
			Extent_pass(driver, "Unable to click on map button,surplus,Deficitand,Neutral is not displayed", test,
					test1);
		}

		System.out.println("**************** Testcase 227 Completed *************");

		Extent_cal(test,
				"Testcase 242 - Ensure in export excel button functionality  with records displayed and window “already exists”");

		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "3");
		Fluentwait(driver, New);
		click(driver, New);

		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);
		wait(driver, "2");
//		
//		Fluentwait(driver, Deficittab);
//		click(driver, Deficittab);
//		
		Fluentwait(driver, Show);
		click(driver, Show);

		wait(driver, "3");

		if (isDisplayed(driver, show_yes)) {

			Fluentwait(driver, show_yes);
			click(driver, show_yes);

		}
		wait(driver, "5");
		if (isDisplayed(driver, Warning_popup)) {
			System.out.println("popup shown");
			Fluentwait(driver, click_yes);
			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);

			Fluentwait(driver, Cancel);
			click(driver, Cancel);

			wait(driver, "2");
			Fluentwait(driver, New);
			click(driver, New);

			Fluentwait(driver, New_Popup_Yes);
			click(driver, New_Popup_Yes);
			wait(driver, "2");

			Fluentwait(driver, dropdown_option);
			click(driver, dropdown_option);

			Fluentwait(driver, Budget_Reposition);
			click(driver, Budget_Reposition);

			Fluentwait(driver, Budget);
			click(driver, Budget);

			wait(driver, "4");

//			uploadFileRobot(driver,EquimentType_Alphabets1);

			String upload_EquimentType_Alphabets1 = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe "
					+ EquimentType_Alphabets1;

			try {
				Runtime.getRuntime().exec(upload_EquimentType_Alphabets1);
			} catch (IOException e) {
				e.printStackTrace();
				System.out.println(e.getLocalizedMessage());
				Extent_fail(driver, e.getLocalizedMessage(), test, test1);
			}

			wait(driver, "10");

			Fluentwait(driver, Location3);

			if (isDisplayed(driver, click_yes)) {

				click(driver, click_yes);

				Fluentwait(driver, Click_ok);
				click(driver, Click_ok);
			}

			wait(driver, "3");
			Fluentwait(driver, ERO_Save);
			click(driver, ERO_Save);
			Fluentwait(driver, ERO_Save_ok);
			click(driver, ERO_Save_ok);
			wait(driver, "2");

		} else {
			System.out.println("popup not shown");
		}
		wait(driver, "5");
		Fluentwait(driver, Tree_table);
		click(driver, Tree_table);

		Fluentwait(driver, Saves_Template);
		click(driver, Saves_Template);

		Format formatter2 = new SimpleDateFormat("ddMMYYYY HHmmss");
		Date date2 = new Date();
		String value2 = formatter.format(date2);

		String Templatename2 = "Field" + value2;

		Fluentwait(driver, Saves_Template_text);
		sendKeys(driver, Saves_Template_text, Templatename2);

		Fluentwait(driver, Save_template);
		click(driver, Save_template);

		wait(driver, "3");

		if (isDisplayed(driver, Save_popup)) {

			System.out.println("Template saved successfully popup was displayed");
			Extent_pass(driver, "Template saved successfully popup was displayed", test, test1);
		} else {

			System.out.println("Template saved successfully popup was not displayed");
			Extent_fail(driver, "Template saved successfully popup was not displayed", test, test1);

		}

		System.out.println("Testcase 242 Completed");

		Extent_cal(test, "Testcase 243 - Ensure in Export excel (with out records), when excel sheet is open ");

		Fluentwait(driver, Tree_table);
		click(driver, Tree_table);

		Fluentwait(driver, Saves_Template);
		click(driver, Saves_Template);

		Fluentwait(driver, Saves_Template_text);
		sendKeys(driver, Saves_Template_text, Templatename2);

		WebElement element_ok = driver.findElement(By.xpath("(//p[text()='Save As Template']//following::input)[2]"));

		element_ok.click();

		try {
			// Wait until the alert is present
			Alert alert = wait.until(ExpectedConditions.alertIsPresent());

			// Check if the alert text matches the expected alert text
			if (alert.getText().equals("Template Name already exists")) {
				System.out.println("Alert for Template Name already exists is present");
				alert.accept(); // Handle the alert
				Extent_pass(driver, "Alert for Template Name already exists is present", test, test1);
			} else {
				System.out.println("Unexpected alert is present: " + alert.getText());
				alert.accept();
				Extent_fail(driver, "Unexpected alert is present: " + alert.getText(), test, test1);
			}
		} catch (Exception e) {
			System.out.println("Alert for Template Name already exists is not present");
			Extent_fail(driver, "Alert for Template Name already exists is not present", test, test1);
		}

		System.out.println("Testcase 243 Completed");

		Extent_cal(test,
				"Testcase 244 - Ensure in export excel button functionality (with out records) window “already exists” , when click on Cancel button");

		Fluentwait(driver, Canceltemplate);
		click(driver, Canceltemplate);

		wait(driver, "2");

		if (!isDisplayed(driver, Saveas_tap)) {

			System.out.println("After click on cancel button, Save as template tab got closed");
			Extent_pass(driver, "After click on cancel button, Save as template tab got closed", test, test1);
		} else {
			System.out.println("After click on cancel button, Save as template tab not get closed");
			Extent_fail(driver, "After click on cancel button, Save as template tab not get closed", test, test1);

		}

		System.out.println("Testcase 244 Completed");

		Extent_cal(test,
				"Testcase 245 - Ensure in Location,Equipment type,Region,Country,Import,Export,Imbalance,Weeks,Weekly Imbalance,Bench Mark Stock,Applied Surplus/Deficit,Calculated Surplus/Deficit,status,ONHI,Sub Lease Qty,One way Qty,TBOH/OFHI,Sales Unit,New Production Container,Long Term Storage,Stock Status,Forecast Functionality ");
		wait(driver, "3");

		List<String> filter_columnnames = Arrays.asList("location", "eqp", "region", "country", "importCnt", "export",
				"imbalance", "weeks", "weeklyimbal", "su", "appsurdef", "calsurdef", "defsurstatusflag", "stock",
				"onewayoutload", "onewayoutreturn", "onewaylease", "tboh", "sali");

		List<String> column_names = Arrays.asList("location", "equipment type", "region", "country", "Import", "Export",
				"imbalance", "weeks", "weeklyimbalance", "Benchmarkstock", "Applied surplus/deficit",
				"Calculated surplus/deficit", "Status", "stock status", "onewayoutload", "onewayoutreturn",
				"One way in load", "One way in trans", "One way in return");

		int Column_size = filter_columnnames.size();

		for (int i = 0; i < 6; i++) {

			wait(driver, "3");

			Fluentwait(driver, Tree_table);
			click(driver, Tree_table);

			Fluentwait(driver, Condition_filter);
			click(driver, Condition_filter);

			String Column_field = column_names.get(i);

			String column_elements = filter_columnnames.get(i);

			wait(driver, "3");

			WebElement gridfields = driver.findElement(By.xpath("(//div[@col-id='" + column_elements + "'])[6]"));

			act.moveToElement(gridfields).build().perform();

			waitForWebElement(driver, gridfields, "gridfields");

			String gridvalue = getTextofWebelement(driver, gridfields, "gridfields");

			wait(driver, "3");

			WebElement filter_field = driver
					.findElement(By.xpath("(//div[@aria-colindex='1']//following::input)[" + (i + 1) + "]"));

			waitForWebElement(driver, filter_field, "filter_field");

			act.moveToElement(filter_field).build().perform();

			filter_field.sendKeys(gridvalue);

			if (isDisplayed1(driver, gridfields)) {

				System.out.println(Column_field + " filter was working fine");

				Extent_pass(driver, Column_field + " filter was working fine", test, test1);
			} else {
				System.out.println(Column_field + " filter was not working fine");
				Extent_fail(driver, Column_field + " filter was not working fine", test, test1);
			}

			Fluentwait(driver, Tree_table);
			click(driver, Tree_table);

			Fluentwait(driver, Distinct_filter);
			click(driver, Distinct_filter);

		}

		System.out.println("Testcase 245 Completed");

		Extent_cal(test, "Testcase 246 - Ensure in Filter OFF button Functionality");

		Fluentwait(driver, Tree_table);
		click(driver, Tree_table);

		Fluentwait(driver, Distinct_filter);
		click(driver, Distinct_filter);

		wait(driver, "3");

		WebElement filter_field = driver.findElement(By.xpath("(//div[@aria-colindex='1']//following::input)[1]"));

		if (!isDisplayed1(driver, filter_field)) {

			System.out.println("Filter turned off");
			Extent_pass(driver, "Filter turn off button functionality is working fine", test, test1);

		} else {

			System.out.println("Filter turned off");
			Extent_fail(driver, "Filter turn off button functionality is not working", test, test1);

		}

		System.out.println("Testcase 246 Completed");

		Extent_cal(test, "Testcase 247 - Ensure in select the carrier tree structure filter");

		scrollBottom(driver);

		wait(driver, "2");
		Fluentwait(driver, Globalserach);
		click(driver, Globalserach);
		sendKeys(driver, Globalserach_IDInput, Search_Id);

		Fluentwait(driver, Click_Search);
		click(driver, Click_Search);

		wait(driver, "2");
		doubleClick(driver, SelectID);

		wait(driver, "3");

		Fluentwait(driver, Tree_record1);
		click(driver, Tree_record1);

		elementScreenShot_new(driver, Tree, "/Expected_screenshot/Deficit/Tree");

		elementScreenShot_new(driver, Tree, "/Actual_screenshot/Deficit/Tree");

		if (imageComparison(driver, "/Deficit/Tree", "/Deficit/Tree") == true) {

			System.out.println("Carrier tree structure filter working fine");
			Extent_pass(driver, "Carrier tree structure filter working fine", test, test1);

		} else {
			System.out.println("Carrier tree structure filter not working fine");
			Extent_fail(driver, "Carrier tree structure filter not working fine", test, test1);
		}

		System.out.println("**************** Testcase 247 Completed *************");

		Extent_cal(test, "Testcase 248 - Ensure in Filter the records using tree structure Region");

		Fluentwait(driver, Tree_Region1);
		click(driver, Tree_Region1);

		String region2 = getText(driver, Region2_Text);
		String region1 = getText(driver, Region1_Text);

		System.out.println("region2 : " + region2);

		String region_total = getText(driver, Total_record);

		int regiontotal = Integer.parseInt(region_total);

		boolean regionfilter = true;

		for (int i = 0; i < regiontotal; i++) {

			WebElement element2 = driver.findElement(By.xpath("//div[@row-id='" + i + "']//div[@col-id='region']"));
			act.moveToElement(element2).build().perform();

			String regions = element2.getText();

			if (!regions.equals(region2) && regions.equals(region1)) {

				System.out.println("Region tree filter is working fine");

			} else {

				System.out.println("Region tree filter is not working fine");
				regionfilter = false;

			}

		}

		if (regionfilter) {
			System.out.println("Tree structure region filter is working fine");
			Extent_pass(driver, "Tree structure region filter is working fine", test, test1);
		} else {
			System.out.println("Tree structure region filter is not working fine");
			Extent_fail(driver, "Tree structure region filter is not working fine", test, test1);
		}

		System.out.println("Testcase 248 - Completed");

		Extent_cal(test, "Testcase 251 - Ensure in Filter the records using tree structure Country");

		Fluentwait(driver, TreeRegion1);
		click(driver, TreeRegion1);

		wait(driver, "3");
		Fluentwait(driver, Country);
		click(driver, Country);

		String Country2 = getText(driver, Country2_Text);
		String Country1 = getText(driver, Country1_Text);

		wait(driver, "3");

		String country_total = getText(driver, Total_record);

		int countrytotal = Integer.parseInt(country_total);

		boolean Countryfilter = true;

		for (int i = 0; i < countrytotal; i++) {

			WebElement element3 = driver.findElement(By.xpath("//div[@row-id='" + i + "']//div[@col-id='country']"));

			act.moveToElement(element3).build().perform();

			String Countries = element3.getText();

			if (!Countries.equals(Country2) && Countries.equals(Country1)) {

				System.out.println("Country tree filter is working fine");

			} else {

				System.out.println("Country tree filter is not working fine");
				Countryfilter = false;

			}

		}

		if (Countryfilter) {
			System.out.println("Tree Country filter is working fine");
			Extent_pass(driver, "Tree Country filter is working fine", test, test1);
		} else {
			System.out.println("Tree Country filter is not working fine");
			Extent_fail(driver, "Tree Country filter is not working fine", test, test1);
		}

		System.out.println("Testcase 251 - Completed");

		Extent_cal(test, "Testcase 252 - Ensure in Filter the records using tree structure Location");

		Fluentwait(driver, TreeLocation1);
		click(driver, TreeLocation1);

		Fluentwait(driver, Location1_Text);
		click(driver, Location1_Text);

		wait(driver, "3");

		String Location2 = getText(driver, Location2_Text);
		String Location1 = getText(driver, Location1_Text);

		String Location_total = getText(driver, Total_record);

		int Locationtotal = Integer.parseInt(Location_total);

		boolean Locationfilter = true;

		for (int i = 0; i < Locationtotal; i++) {

			WebElement element4 = driver.findElement(By.xpath("//div[@row-id='" + i + "']//div[@col-id='location']"));

			String Locations = element4.getText();

			if (!Locations.equals(Location2) && Locations.equals(Location1)) {

				System.out.println("Country tree filter is working fine");

			} else {

				System.out.println("Country tree filter is not working fine");
				Locationfilter = false;

			}

		}

		if (Locationfilter) {
			System.out.println("Tree Location filter is working fine");
			Extent_pass(driver, "Tree Location filter is working fine", test, test1);
		} else {
			System.out.println("Tree Location filter is not working fine");
			Extent_fail(driver, "Tree Location filter is not working fine", test, test1);
		}

		System.out.println("Testcase 252 Completed");

		Extent_cal(test, "Testcase 253 - Ensure in Import From Excel  button Functionality ");

		scrollBottom(driver);

		wait(driver, "3");
		Fluentwait(driver, New);
		click(driver, New);

		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);
		wait(driver, "2");

		Fluentwait(driver, dropdown_option);
		click(driver, dropdown_option);

		Fluentwait(driver, Budget_Reposition);
		click(driver, Budget_Reposition);

		Fluentwait(driver, Budget);
		click(driver, Budget);
		wait(driver, "2");

//		uploadFileRobot(driver, Import_file);

		String upload_Import_file = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe " + Import_file;

		try {
			Runtime.getRuntime().exec(upload_Import_file);
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println(e.getLocalizedMessage());
			Extent_fail(driver, e.getLocalizedMessage(), test, test1);
		}

		wait(driver, "10");

		Fluentwait(driver, Location3);

		if (isDisplayed(driver, click_yes)) {

			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);
		}

		wait(driver, "2");

		List<String> ems_columnnames = Arrays.asList("location", "eqp", "region", "country", "importCnt", "export",
				"imbalance", "weeks", "weeklyimbal", "su", "appsurdef", "calsurdef", "defsurstatusflag", "stock",
				"onewayoutload", "onewayoutreturn", "onewaylease", "tboh", "sali");

		int ems_size = ems_columnnames.size();

		boolean columnspresent = true;

		for (int i = 0; i < ems_size; i++) {

			String columnname = ems_columnnames.get(i);

			wait(driver, "3");
			WebElement columns = driver.findElement(By.xpath("(//div[@col-id='" + columnname + "'])[4]"));

			act.moveToElement(columns).build().perform();

			if (isDisplayed1(driver, columns)) {

				System.out.println("After click on the show button, Records of the " + columnname
						+ " for ems reposition was displayed");
				Extent_pass(driver, "After click on the show button, Records of the " + columnname
						+ "  for ems reposition was displayed", test, test1);
			} else {

				System.out.println("After click on the show button, Records of the " + columnname
						+ "  for ems reposition was not displayed");
				Extent_fail(driver, "After click on the show button, Records of the " + columnname
						+ "  for ems reposition was not displayed", test, test1);
				columnspresent = false;
			}

		}

		if (columnspresent) {

			Extent_pass1(test, "Import excel functionality is working fine");

		} else {

			Extent_fail(driver, "Import excel functionality is not working fine", test, test1);
		}

		System.out.println("Testcase 253 Completed");

//		Extent_cal(test, "Testcase 254 - Ensure in when click the import from excel button it should open the import from excel window");
//		
//		
//		Fluentwait(driver, Cancel);
//		click(driver, Cancel);
//		
//		wait(driver,"3");
//		Fluentwait(driver, New);
//		click(driver, New);
//
//		Fluentwait(driver, New_Popup_Yes);
//		click(driver, New_Popup_Yes);
//		wait(driver, "2");
//		
//		
////		Fluentwait(driver, Fromweek_input);
////		clear(driver, Fromweek_input);
////		sendKeys(driver, Fromweek_input, "20");
////		wait(driver, "2");
////
////	
////		wait(driver, "2");
////		Fluentwait(driver, Toweek_input);
////		clear(driver, Toweek_input);
////		sendKeys(driver, Toweek_input, "40");
//		
//				
//		Fluentwait(driver, dropdown_option);
//		click(driver, dropdown_option);
//		
//		Fluentwait(driver, Forecasting_reposition);
//		click(driver, Forecasting_reposition);
//		
//		Fluentwait(driver, Import);
//		click(driver, Import);
//		
//		wait(driver, "5");
//		
//		if(isDisplayed(driver, Import_Excel)) {
//			
//			System.out.println("After click on import button Import excel window is opened");
//			Extent_pass(driver, "After click on import button Import excel window is opened", test,test1);
//		}else {
//			
//			System.out.println("After click on import button Import excel window is not opened");
//			Extent_fail(driver, "After click on import button Import excel window is not opened", test,test1);
//			global ="After click on import button Import excel window is not opened";
//		}
//		
//		Fluentwait(driver, Import_close);
//		click(driver, Import_close);
//		
//		System.out.println("Testcase 254 completed");

		Extent_cal(test, "Testcase 257 - Ensure in Import From Excel  window, when click on Upload button");

		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "3");
		Fluentwait(driver, New);
		click(driver, New);

		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);
		wait(driver, "2");

		Fluentwait(driver, dropdown_option);
		click(driver, dropdown_option);

		Fluentwait(driver, Budget_Reposition);
		click(driver, Budget_Reposition);

		Fluentwait(driver, Budget);
		click(driver, Budget);
		wait(driver, "2");

//		uploadFileRobot(driver, Import_file);

		String upload_Import_file2 = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe " + Import_file;

		try {
			Runtime.getRuntime().exec(upload_Import_file2);
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println(e.getLocalizedMessage());
			Extent_fail(driver, e.getLocalizedMessage(), test, test1);
		}

		wait(driver, "10");

		Fluentwait(driver, Location3);

		if (isDisplayed(driver, click_yes)) {

			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);
		}

		wait(driver, "2");

		List<String> gridcolumn_names = Arrays.asList("location", "equipment type", "region", "country", "import",
				"export", "imbalance", "weeks", "weeklyimbalance", "benchmark stock", "applied surplus/deficit",
				"calculated surplus/deficit", "Status", "stock status", "onewayoutload", "onewayoutreturn",
				"one way in load", "one way in trans", "one way in trans");

		for (int i = 0; i < ems_size; i++) {

			String columnname = ems_columnnames.get(i);
			String colmn = gridcolumn_names.get(i);

			wait(driver, "3");
			WebElement columns = driver.findElement(By.xpath("(//div[@col-id='" + columnname + "'])[4]"));

			act.moveToElement(columns).build().perform();

			if (isDisplayed1(driver, columns)) {

				System.out.println("After click on the show button, Records of the " + colmn
						+ " for ems reposition was displayed");
				Extent_pass(driver, "After click on the show button, Records of the " + colmn
						+ "  for ems reposition was displayed", test, test1);
			} else {

				System.out.println("After click on the show button, Records of the " + colmn
						+ "  for ems reposition was not displayed");
				Extent_fail(driver, "After click on the show button, Records of the " + colmn
						+ "  for ems reposition was not displayed", test, test1);
			}

		}

		Fluentwait(driver, Save);
		click(driver, Save);

		if (isDisplayed(driver, Save_popup_ok)) {

			String savedpopup = getText(driver, Save_popup_text);

			if (savedpopup.equals("Deficit and Surplus Location Details saved")) {

				System.out.println(
						"System allows to save the imported the data's in the deficit and surplus location identification grid");
				Extent_pass1(test,
						"System allows to save the imported the data's in the deficit and surplus location identification grid");
			} else {
				System.out.println(
						"System not allows to save the imported the data's in the deficit and surplus location identification grid");
				Extent_fail(driver,
						"System not allows to save the imported the data's in the deficit and surplus location identification grid",
						test, test1);
			}

			Fluentwait(driver, Save_popup_ok);
			click(driver, Save_popup_ok);
			wait(driver, "2");
		}

		System.out.println("Testcase 257 Completed");

		Extent_cal(test, "Testcase 260 - Ensure in Import From Excel  window, when click on yes button");

		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "3");
		Fluentwait(driver, New);
		click(driver, New);

		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);
		wait(driver, "2");

		Fluentwait(driver, dropdown_option);
		click(driver, dropdown_option);

		Fluentwait(driver, Budget_Reposition);
		click(driver, Budget_Reposition);

		Fluentwait(driver, Budget);
		click(driver, Budget);
		wait(driver, "2");

//		uploadFileRobot(driver, Import_file);

		String upload_Import_file3 = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe " + Import_file;

		try {
			Runtime.getRuntime().exec(upload_Import_file3);
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println(e.getLocalizedMessage());
			Extent_fail(driver, e.getLocalizedMessage(), test, test1);
		}

		wait(driver, "10");

		Fluentwait(driver, Location3);

		if (isDisplayed(driver, click_yes)) {

			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);
		}

		wait(driver, "2");

		Fluentwait(driver, Closetab);
		click(driver, Closetab);

		wait(driver, "2");

		if (!isDisplayed(driver, Deficittab)) {

			System.out.println("After click on close button, deficit and surplus location tab was closed");
			Extent_pass(driver, "After click on close button, deficit and surplus location tab was closed", test,
					test1);

		} else {

			System.out.println("After click on close button, deficit and surplus location tab was not closed");
			Extent_fail(driver, "After click on close button, deficit and surplus location tab was not closed", test,
					test1);
		}

		System.out.println("Testcase 260 Completed");

		Extent_cal(test, "Testcase 258 - Ensure in Import From Excel  window, when click on clear button");

		Fluentwait(driver, Searchbox);
		sendKeys(driver, Searchbox, "Deficit and Surplus Location Identification");

		Fluentwait(driver, Selectdeficit);
		click(driver, Selectdeficit);

		wait(driver, "5");

		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "3");
		Fluentwait(driver, New);
		click(driver, New);

		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);
		wait(driver, "2");

		Fluentwait(driver, dropdown_option);
		click(driver, dropdown_option);

		Fluentwait(driver, Budget_Reposition);
		click(driver, Budget_Reposition);

		Fluentwait(driver, Budget);
		click(driver, Budget);
		wait(driver, "2");

//		uploadFileRobot(driver, Import_file);

		String upload_Import_file4 = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe " + Import_file;

		try {
			Runtime.getRuntime().exec(upload_Import_file4);
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println(e.getLocalizedMessage());
			Extent_fail(driver, e.getLocalizedMessage(), test, test1);
		}

		wait(driver, "10");

		Fluentwait(driver, Location3);

		if (isDisplayed(driver, click_yes)) {

			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);
		}

		if (isDisplayed(driver, click_yes)) {

			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);
		}

		wait(driver, "2");

		Fluentwait(driver, Cancel);
		click(driver, Cancel);

		wait(driver, "2");

		if (!isDisplayed(driver, EquipmentType_column2)) {

			System.out.println("System allowed to clear the mapped records");
			Extent_pass(driver, "System allowed to clear the mapped records", test, test1);
		} else {

			System.out.println("System not allowed to clear the mapped records");
			Extent_fail(driver, "System not allowed to clear the mapped records", test, test1);
		}

		System.out.println("Testcase 258 Completed");

		Extent_cal(test, "Testcase 259 - Ensure in Import From Excel  window, when click on close button");

		wait(driver, "3");
		Fluentwait(driver, New);
		click(driver, New);

		Fluentwait(driver, New_Popup_Yes);
		click(driver, New_Popup_Yes);
		wait(driver, "2");

		Fluentwait(driver, dropdown_option);
		click(driver, dropdown_option);

		Fluentwait(driver, Budget_Reposition);
		click(driver, Budget_Reposition);

		Fluentwait(driver, Budget);
		click(driver, Budget);
		wait(driver, "2");

//		uploadFileRobot(driver, Import_file);

		String upload_Import_file5 = System.getProperty("user.dir") + "/driver/MasterDownloadfile.exe " + Import_file;

		try {
			Runtime.getRuntime().exec(upload_Import_file5);
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println(e.getLocalizedMessage());
			Extent_fail(driver, e.getLocalizedMessage(), test, test1);
		}

		wait(driver, "10");

		Fluentwait(driver, Location3);

		if (isDisplayed(driver, click_yes)) {

			click(driver, click_yes);

			Fluentwait(driver, Click_ok);
			click(driver, Click_ok);
		}

		wait(driver, "2");

		Fluentwait(driver, Closetab);
		click(driver, Closetab);

		wait(driver, "2");

		if (!isDisplayed(driver, EquipmentType_column2)) {

			System.out.println("System allowed to close the mapped records");
			Extent_pass(driver, "System allowed to close the mapped records", test, test1);
		} else {

			System.out.println("System not allowed to close the mapped records");
			Extent_fail(driver, "System not allowed to close the mapped records", test, test1);
		}

		System.out.println("Testcase 259 Completed");

	}

}
