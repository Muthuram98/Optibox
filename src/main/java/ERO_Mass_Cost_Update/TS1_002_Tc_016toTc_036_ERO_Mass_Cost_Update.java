package ERO_Mass_Cost_Update;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;

import com.aventstack.extentreports.ExtentTest;
import com.fasterxml.jackson.databind.PropertyNamingStrategies.UpperCamelCaseStrategy;
import com.gargoylesoftware.htmlunit.html.xpath.LowerCaseFunction;

import commonMethods.Keywords;
import commonMethods.Utils;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;

public class TS1_002_Tc_016toTc_036_ERO_Mass_Cost_Update extends Keywords{
	public void Scenario002(WebDriver driver, ExtentTest test,ExtentTest test1,String url, int dataset) throws AWTException, IOException, InterruptedException {	
	
	System.out.println("url : "+url);
	
	String Username = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset"+dataset, "ero_mass_cost_update", "Username");
	String Password = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset"+dataset, "ero_mass_cost_update", "Password");
	String ID = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset"+dataset, "ero_mass_cost_update", "Id");
	String Expected_screencolor = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset"+dataset,
			"ero_mass_cost_update", "Screen_background");
	String Expected_FieldColor = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset" + dataset,
			"ero_mass_cost_update", "Fieldcolor1");
	String Expected_Mandatory_Field_Color = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset" + dataset,
			"ero_mass_cost_update", "Mandatory_Fieldcolor1");
	String Expected_Autogenerated_Field_Color = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset" + dataset,
			"ero_mass_cost_update", "Autogenerated_Fieldcolor1");
	String Expected_FontFamily = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset" + dataset,
			"ero_mass_cost_update", "FontFamily1");
	String FieldInput_name = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset"+dataset,
			"ero_mass_cost_update", "Fieldvalue1");
	String FieldInput_name1 = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset"+dataset,
			"ero_mass_cost_update", "Fieldvalue2");
	String FieldInput_name2 = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset"+dataset,
			"ero_mass_cost_update", "Fieldvalue3");
	String FieldInput_name3 = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset"+dataset,
			"ero_mass_cost_update", "Fieldvalue4");
	String LocationName1 = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset"+dataset,
			"ero_mass_cost_update", "Location_Data1");
	String LocationName2 = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset"+dataset,
			"ero_mass_cost_update", "Location_Data2");
	String Message_Icon_color1 = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset"+dataset,
			"ero_mass_cost_update", "Message_IconColor1");
	String Error_Text_Msg1 = Utils.getDataFromTestData("TS_002_Tc_016toTc_036_ERO_Mass_Cost_Update_Dataset"+dataset,
			"ero_mass_cost_update", "Error_Text_Msg1");
	
	 navigateUrl(driver, url);
		
		Fluentwait(driver, Username_input2);
		sendKeys(driver, Username_input2, Username);
		
		Fluentwait(driver, Password_input2);
		sendKeys(driver, Password_input2, Password);
		
		Fluentwait(driver, SignIn2);
		click(driver, SignIn2);
		
		wait(driver,"5");
		
		if(isDisplayed(driver, session_confirmation2)) {
			Fluentwait(driver, session_confirmation2);
			click(driver, session_confirmation2);
		}
		
		Fluentwait(driver, Searchbox2);
		sendKeys(driver, Searchbox2, "ERO Mass Cost Update");
		
		Fluentwait(driver, Select_MassCostUpdate);
		click(driver, Select_MassCostUpdate);
		
		wait(driver,"3");
		
		Extent_cal(test, "Testcase 16 - Ensure that the screen background should be in correct color");

		Fluentwait(driver, Screen_ERO_Cost_Update);
		String actualscreencolor = getTextBackgroundColor(driver, Screen_ERO_Cost_Update);

		if (actualscreencolor.equals(Expected_screencolor)) {

			System.out.println("Screen Background color Matched || Expected screen color was : " + Expected_screencolor
					+ " || Actual screen color was " + actualscreencolor);
			Extent_pass(driver, "Screen Background color Matched || Expected screen color was : " + Expected_screencolor
					+ " || Actual screen color was " + actualscreencolor, test, test1);

		} else {
			System.out.println("Screen Background color Not Matched || Expected screen color was : "
					+ Expected_screencolor + " || Actual screen color was " + actualscreencolor);
			Extent_fail(driver, "Screen Background color Not Matched || Expected screen color was : "
					+ Expected_screencolor + " || Actual screen color was " + actualscreencolor, test, test1);
		}

		System.out
				.println("//***************************Testcase 16 Completed **************************************//");
	
		
		
		Extent_cal(test, "Testcase 19 - Ensure that the read only mode field background should be in correct color");

		String Field1 = getTextBackgroundColor(driver, From_Loc_1);

		System.out.println("Field1 : " + Field1);

		if (Field1.equals(Expected_FieldColor)) {

			System.out.println("Field1 Background color Matched || Expected Field1 color was : "
					+ Expected_FieldColor + " || Actual Field1 color was " + Field1);
			Extent_pass(driver, "Search1 Field1 Background color Matched || Expected Field1 color was : "
					+ Expected_FieldColor + " || Actual Field1 color was " + Field1, test, test1);
		} else {
			System.out.println("Field1 color Not Matched || Expected Field1 color was : "
					+ Expected_FieldColor + " || Actual Field1 color was " + Field1);
			Extent_fail(driver, "Field1 Background color Not Matched || Expected Search1 field color was : "
					+ Expected_FieldColor + " || Actual Field1 color was " + Field1, test, test1);
		}

		String Field2 = getTextBackgroundColor(driver, From_Loc_2);

		System.out.println("Field2 : " + Field2);

		if (Field2.equals(Expected_FieldColor)) {

			System.out.println("Field1 Background color Matched || Expected Field1 color was : "
					+ Expected_FieldColor + " || Actual Field1 color was " + Field2);
			Extent_pass(driver, "Search1 Field1 Background color Matched || Expected Field1 color was : "
					+ Expected_FieldColor + " || Actual Field1 color was " + Field2, test, test1);
		} else {
			System.out.println("Field1 color Not Matched || Expected Field1 color was : "
					+ Expected_FieldColor + " || Actual Field1 color was " + Field2);
			Extent_fail(driver, "Field1 Background color Not Matched || Expected Search1 field color was : "
					+ Expected_FieldColor + " || Actual Field1 color was " + Field2, test, test1);
		}
		System.out
				.println("//***************************Testcase 19 Completed **************************************//");
		
		

		Extent_cal(test, "Testcase 20 - Ensure that the mandatory field should be highlighted with SVM standard color");

		
		String Mandatory_Field1 = getTextBackgroundColor(driver, Cost_Type);

		System.out.println("Mandatory_Field1 : " + Mandatory_Field1);

		if (Mandatory_Field1.equals(Expected_Mandatory_Field_Color)) {

			System.out.println("Mandatory Filed Background color Matched || Expected Mandatory Filed color was : "
					+ Expected_Mandatory_Field_Color + " || Actual Mandatory Filed color was " + Mandatory_Field1);
			Extent_pass(driver,
					"Search1 field Background color Matched || Expected Mandatory Filed color was : "
							+ Expected_Mandatory_Field_Color + " || Actual Mandatory Filed color was " + Mandatory_Field1,
					test, test1);
		} else {
			System.out.println("Search1 field Background color Not Matched || Expected Mandatory Filed color was : "
					+ Expected_Mandatory_Field_Color + " || Actual Mandatory Filed color was " + Mandatory_Field1);
			Extent_fail(driver,
					"Mandatory Filed Background color Not Matched || Expected Mandatory Filed color was : "
							+ Expected_Mandatory_Field_Color + " || Actual Mandatory Filed color was " + Mandatory_Field1,
					test, test1);
		}

		
		String Field3 = getTextBackgroundColor(driver, From_Loc_1);

		System.out.println("Field3 : " + Field3);

		if (Field3.equals(Expected_FieldColor)) {

			System.out.println("Field1 Background color Matched || Expected Mandatory Filed color was : "
					+ Expected_FieldColor + " || Actual Mandatory Filed color was " + Field3);
			Extent_pass(driver, "Search1 Field1 Background color Matched || Expected Mandatory Filed color was : "
					+ Expected_FieldColor + " || Actual Mandatory Filed color was " + Field3, test, test1);
		} else {
			System.out.println("Field1 color Not Matched || Expected Mandatory Filed color was : "
					+ Expected_FieldColor + " || Actual Mandatory Filed color was " + Field3);
			Extent_fail(driver, "Field1 Background color Not Matched || Expected Mandatory Filed color was : "
					+ Expected_FieldColor + " || Actual Mandatory Filed color was " + Field3, test, test1);
		}

		String Field4 = getTextBackgroundColor(driver, From_Loc_2);

		System.out.println("Field4 : " + Field4);

		if (Field4.equals(Expected_FieldColor)) {

			System.out.println("Field1 Background color Matched || Expected Mandatory Filed color was : "
					+ Expected_FieldColor + " || Actual Field1 color was " + Field4);
			Extent_pass(driver, "Search1 Field1 Background color Matched || Expected Mandatory Filed color was : "
					+ Expected_FieldColor + " || Actual Field1 color was " + Field4, test, test1);
		} else {
			System.out.println("Field1 color Not Matched || Expected Mandatory Filed color was : "
					+ Expected_FieldColor + " || Actual Field1 color was " + Field4);
			Extent_fail(driver, "Field1 Background color Not Matched || Expected Mandatory Filed color was : "
					+ Expected_FieldColor + " || Actual Mandatory Filed color was " + Field4, test, test1);
		}
		
		
		System.out
		.println("//***************************Testcase 20 Completed **************************************//");	
		
		
		
		Extent_cal(test, "Testcase 21 - Ensure that the auto generated and reference no field should be highlighted with SVM standard color");

		
		String Autogenerated_Field1 = getTextBackgroundColor(driver, Cost_Type);

		System.out.println("Autogenerated_Field1 : " + Autogenerated_Field1);

		if (Autogenerated_Field1.equals(Expected_Mandatory_Field_Color)) {

			System.out.println("Autogenerated field Background color Matched || Expected Autogenerated field color was : "
					+ Expected_Mandatory_Field_Color + " || Actual Autogenerated field color was " + Autogenerated_Field1);
			Extent_pass(driver,
					"Autogenerated field Background color Matched || Expected Search1 field color was : "
							+ Expected_Mandatory_Field_Color + " || Actual Autogenerated field color was " + Autogenerated_Field1,
					test, test1);
		} else {
			System.out.println("Autogenerated field Background color Not Matched || Expected Autogenerated field color was : "
					+ Expected_Mandatory_Field_Color + " || Actual Autogenerated field color was " + Autogenerated_Field1);
			Extent_fail(driver,
					"Autogenerated field Background color Not Matched || Expected Search1 field color was : "
							+ Expected_Mandatory_Field_Color + " || Actual Autogenerated field color was " + Autogenerated_Field1,
					test, test1);
		}

		
		
		
		String Autogenerated_Field2 = getTextBackgroundColor(driver, Activity_Type_Grid);

		System.out.println("Autogenerated_Field2 : " + Autogenerated_Field2);

		
		
		
		
		
		
		if (Autogenerated_Field2.equals(Expected_Autogenerated_Field_Color)) {

			System.out.println("Autogenerated field Background color Matched || Expected Autogenerated field color was : "
					+ Expected_Autogenerated_Field_Color + " || Actual Autogenerated field color was " + Autogenerated_Field2);
			Extent_pass(driver,
					"Autogenerated field Background color Matched || Expected Search1 field color was : "
							+ Expected_Autogenerated_Field_Color + " || Actual Autogenerated field color was " + Autogenerated_Field2,
					test, test1);
		} else {
			System.out.println("Autogenerated field Background color Not Matched || Expected Autogenerated field color was : "
					+ Expected_Autogenerated_Field_Color + " || Actual Autogenerated field color was " + Autogenerated_Field2);
			Extent_fail(driver,
					"Autogenerated field Background color Not Matched || Expected Search1 field color was : "
							+ Expected_Autogenerated_Field_Color + " || Actual Autogenerated field color was " + Autogenerated_Field2,
					test, test1);
		}
		
		
		System.out
		.println("//***************************Testcase 21 Completed **************************************//");
		
		
		
		
click(driver, Cancel_Button);
		
		Fluentwait(driver, NewReport);
		click(driver, NewReport);
		
		
		Fluentwait(driver, Click_Confirm);
		click(driver, Click_Confirm);
		
		wait(driver,"5");

		
		
		Fluentwait(driver, Add_Plus_Button);
		click(driver, Add_Plus_Button);
		
		
		wait(driver,"3");

		Fluentwait(driver, Select_Loc);
		doubleClick(driver, Select_Loc);
		
		wait(driver,"3");

		
		click(driver, ShowButton);
		
		
		
		Extent_cal(test, "Testcase 24 - Ensure text in all fields specified in the correct screen font");
		
		wait(driver, "3");


		String Font_Field1 = Getcssvalue(driver, Cost_Type, "font-family");

		System.out.println("fontfamily : " + Font_Field1);

		if (Font_Field1.equals(Expected_FontFamily)) {

			System.out.println("Font_Field1 font family Matched || Expected Font family of Font_Field1 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field1 field text is : " + Font_Field1);
			Extent_pass(driver, "From year Search1 Matched || Expected Font family of Font_Field1 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field1 field text is : " + Font_Field1,
					test, test1);
		} else {
			System.out.println("Font_Field1 font family Not Matched || Expected Font family of Font_Field1 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field1 field text is : " + Font_Field1);
			Extent_fail(driver, " Font_Field1 font family Not Matched || Expected Font family of Font_Field1 field text is : "
					+ Expected_FontFamily + " || Actual font family of Search1 field text is : " + Font_Field1,
					test, test1);

		}

		String Font_Field2 = Getcssvalue(driver, From_Loc_1, "font-family");

		System.out.println("fontfamily : " + Font_Field2);

		if (Font_Field2.equals(Expected_FontFamily)) {

			System.out.println("Search2 font family Matched || Expected Font family of Font_Field2 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field2 field text is : " + Font_Field2);
			Extent_pass(driver, "Search2 font family Matched || Expected Font family of Font_Field2 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field2 field text is : " + Font_Field2,
					test, test1);
		} else {
			System.out.println("Search2 font family Not Matched || Expected Font family of Font_Field2 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field2 field text is : " + Font_Field2);
			Extent_fail(driver, "Search2 font family Not Matched || Expected Font family of Font_Field2 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field2 field text is : " + Font_Field2,
					test, test1);

		}

		String Font_Field3 = Getcssvalue(driver, From_Loc_2, "font-family");

		System.out.println("fontfamily : " + Font_Field3);

		if (Font_Field3.equals(Expected_FontFamily)) {

			System.out.println("Font_Field3 font family Matched || Expected Font family of Font_Field3 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field3 field text is : " + Font_Field3);
			Extent_pass(driver, "Font_Field3 font family Matched || Expected Font family of Font_Field3 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field3 field text is : " + Font_Field3,
					test, test1);
		} else {
			System.out.println("Search3 font family Not Matched || Expected Font family of Font_Field3 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field3 field text is : " + Font_Field3);
			Extent_fail(driver, "  font family Not Matched || Expected Font family of Font_Field3 field text is : "
					+ Expected_FontFamily + " || Actual font family of From Font_Field3 text is : " + Font_Field3,
					test, test1);

		}

		String Font_Field4 = Getcssvalue(driver, Activity_Type_Grid, "font-family");

		System.out.println("fontfamily : " + Font_Field4);

		if (Font_Field4.equals(Expected_FontFamily)) {

			System.out.println("Search4 font family Matched || Expected Font family of Font_Field4 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field4 field text is : " + Font_Field4);
			Extent_pass(driver, "Search4 font family Matched || Expected Font family of Font_Field4 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field4 field text is : " + Font_Field4,
					test, test1);
		} else {
			System.out.println("Search4 font family Not Matched || Expected Font family of Font_Field4 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field4 field text is : " + Font_Field4);
			Extent_fail(driver, "Search4 font family Not Matched || Expected Font family of Font_Field4 field text is : "
					+ Expected_FontFamily + " || Actual font family of Font_Field4 field text is : " + Font_Field4,
					test, test1);

		}

		wait(driver, "5");

		for (int i = 1; i <= 19; i++) {

			WebElement gridfields = driver.findElement(By.xpath("(//tr[@data-ri='" + i + "'])[1]"));

			Actions action1 = new Actions(driver);

			action1.moveToElement(gridfields).build().perform();

			String Grid_field_fonts = Getcssvalue_webelement(driver, gridfields, "font-family");

			String Columname = getAttribute_webelement(driver, gridfields, "data-ri");

			if (Grid_field_fonts.equals(Expected_FontFamily)) {

				System.out.println("Grid fields font family Matched || Expected Font family of Grid field " + Columname
						+ " is : " + Expected_FontFamily + " || Actual font family of Grid field " + Columname
						+ " is : " + Grid_field_fonts);
				Extent_pass(driver,
						"Grid fields font family Matched || Expected Font family of Grid field " + Columname + " is : "
								+ Expected_FontFamily + " || Actual font family of Grid field " + Columname + " is : "
								+ Grid_field_fonts,
						test, test1);
			} else {
				System.out.println("Grid fields font family Not Matched || Expected Font family of Grid field "
						+ Columname + " is : " + Expected_FontFamily + " || Actual font family of Grid field "
						+ Columname + " is : " + Grid_field_fonts);
				Extent_fail(driver,
						"Grid fields font family Not Matched || Expected Font family of Grid field " + Columname
								+ " is : " + Expected_FontFamily + " " + "|| Actual font family of Grid field "
								+ Columname + " is : " + Grid_field_fonts,
						test, test1);

			}

		}
		
		
		System.out
		.println("//***************************Testcase 24 Completed **************************************//");
		
		
		
		Extent_cal(test, " Testcase 31 Ensure all character or alphanumeric fields left justified");

		wait(driver, "5");

		Fluentwait(driver, Grid_Rec1);

		try {
			elementScreenShot_new(driver, Grid_Rec1, "/Expected_screenshot/Elementscreenshot/Alphabetic");
			elementScreenShot_new(driver, Grid_Rec1, "/Actual_screenshot/Elementscreenshot/Alphabetic");
			// imageComparison2(driver, "/Elementscreenshot/Alphabetic",
			// "/Elementscreenshot/Alphabetic");

			if (imageComparison(driver, "/Elementscreenshot/Alphabetic", "/Elementscreenshot/Alphabetic") == true) {

				System.out.println("Alphabetic and it aligned on the left side");
				Extent_pass(driver, "Alphabetic and it aligned on the left side", test, test1);

			} else {

				System.out.println("Alphabetic and it was not aligned on the left side");
				Extent_fail(driver, "Alphabetic and it was not aligned on the left side", test, test1);
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		wait(driver, "5");

		Fluentwait(driver, Grid_Rec);

		try {
			elementScreenShot_new(driver, Grid_Rec, "/Expected_screenshot/Elementscreenshot/Numeric");
			elementScreenShot_new(driver, Grid_Rec, "/Actual_screenshot/Elementscreenshot/Numeric");
			// imageComparison2(driver, "/Elementscreenshot/Alphabetic",
			// "/Elementscreenshot/Alphabetic");

			if (imageComparison(driver, "/Elementscreenshot/Numeric", "/Elementscreenshot/Numeric") == true) {

				System.out.println("Numeric and it aligned on the Right side");
				Extent_pass(driver, "Numeric and it aligned on the Right side", test, test1);

			} else {

				System.out.println("Numeric and it was not aligned on the Right side");
				Extent_fail(driver, "Numeric and it was not aligned on the Right side", test, test1);
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		System.out
				.println("//***************************Testcase 31 Completed **************************************//");

		Extent_cal(test, " Testcase 32 Ensure  all numeric fields right justified");

//click(driver, Cancel_Button);
		
		Fluentwait(driver, NewReport);
		click(driver, NewReport);
		
		
		Fluentwait(driver, Click_Confirm);
		click(driver, Click_Confirm);
		
		wait(driver,"5");

		
		
		Fluentwait(driver, Add_Plus_Button);
		click(driver, Add_Plus_Button);
		
		
		wait(driver,"3");

		Fluentwait(driver, Select_Loc);
		doubleClick(driver, Select_Loc);
		
		wait(driver,"3");

		
		click(driver, ShowButton);
		
		
		
		wait(driver, "5");

		Fluentwait(driver, Grid_Rec);

		try {
			elementScreenShot_new(driver, Grid_Rec, "/Expected_screenshot/Elementscreenshot/Numeric");
			elementScreenShot_new(driver, Grid_Rec, "/Actual_screenshot/Elementscreenshot/Numeric");
			// imageComparison2(driver, "/Elementscreenshot/Alphabetic",
			// "/Elementscreenshot/Alphabetic");

			if (imageComparison(driver, "/Elementscreenshot/Numeric", "/Elementscreenshot/Numeric") == true) {

				System.out.println("Numeric and it aligned on the Right side");
				Extent_pass(driver, "Numeric and it aligned on the Right side", test, test1);

			} else {

				System.out.println("Numeric and it was not aligned on the Right side");
				Extent_fail(driver, "Numeric and it was not aligned on the Right side", test, test1);
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		System.out
				.println("//***************************Testcase 32 Completed **************************************//");
		
		
		
		Extent_cal(test, "Testcase 33 - Ensure all the error message text spell correctly on this screen");	
		
		
wait(driver, "3");
		
		
		
		click(driver, EditButton);
		
		wait(driver, "2");

		
click(driver, Cancel_Button);
		
		Fluentwait(driver, NewReport);
		click(driver, NewReport);
		
		
		Fluentwait(driver, Click_Confirm);
		click(driver, Click_Confirm);
		
		wait(driver,"5");

		
		
		Fluentwait(driver, Add_Plus_Button);
		click(driver, Add_Plus_Button);
		
		
		wait(driver,"5");
		
		

		Fluentwait(driver, Loc_Search);
		click(driver, Loc_Search);
		wait(driver,"3");

		sendKeys(driver, Loc_Search, LocationName1);
		
		wait(driver,"2");

		
		doubleClick(driver, Select_Loc1);
		
		wait(driver,"2");

		
		Fluentwait(driver, Add_Plus_Button);
		click(driver, Add_Plus_Button);
		
		
		wait(driver,"5");
		
		
		click(driver, Loc_Search);
        wait(driver,"2");


		sendKeys(driver, Loc_Search, LocationName2);
		
         wait(driver,"2");

		
		doubleClick(driver, Select_Loc1);
		wait(driver,"2");

		
		
		wait(driver,"3");

		
		click(driver, ShowButton);
		
		
		wait(driver,"3");
		
		
		
		click(driver, EditButton);
		
		wait(driver, "2");

		
		
		click(driver, Click_Save);
		
		wait(driver, "2");
		
		String Error_Msg_Validation_Text1 = getText(driver,Error_Msg_Grid );

		System.out.println("Error_Msg_Validation_Text1 : "+Error_Msg_Validation_Text1);
		
		
		if (Error_Msg_Validation_Text1.equals(Error_Text_Msg1)) {
			System.out.println("Matched || Expected Validation Message was : " + Error_Text_Msg1
					+ " Actual Validation Message was : " + Error_Msg_Validation_Text1);
			Extent_pass(driver, "Matched || Expected Validation Message was : "
					+ Error_Text_Msg1 + " Actual Validation Message was : " + Error_Msg_Validation_Text1,
					test,test1);
		} else {
			System.out.println(
					"Not Matched || Expected Validation Message was : " + Error_Text_Msg1
							+ " Actual Validation Message was : " + Error_Msg_Validation_Text1);
			Extent_fail2(driver, "Not Matched || Expected Validation Message was : "
					+ Error_Text_Msg1 + " Actual Validation Message was : " + Error_Msg_Validation_Text1,
					test);

		}

		
		Fluentwait(driver, Close_Popup);
		click(driver, Close_Popup);
		
		
		
		
		
		
		System.out
		.println("//***************************Testcase 33 Completed **************************************//");
		
		
		
		
		
		
		
	
		
		Extent_cal(test, "Testcase 34 - Ensure all user input captured in UPPER case or lowercase consistently");

		
		
		wait(driver, "2");

		
click(driver, Cancel_Button);
		
		Fluentwait(driver, NewReport);
		click(driver, NewReport);
		
		
		Fluentwait(driver, Click_Confirm);
		click(driver, Click_Confirm);
		
		wait(driver,"5");

		
		
		Fluentwait(driver, Add_Plus_Button);
		click(driver, Add_Plus_Button);
		
		
		wait(driver,"5");
		
		

		Fluentwait(driver, Loc_Search);
		click(driver, Loc_Search);
		wait(driver,"3");

		sendKeys(driver, Loc_Search, LocationName1);
		
		wait(driver,"2");

		
		doubleClick(driver, Select_Loc1);
		
		wait(driver,"2");

		
		Fluentwait(driver, Add_Plus_Button);
		click(driver, Add_Plus_Button);
		
		
		wait(driver,"5");
		
		
		click(driver, Loc_Search);
        wait(driver,"2");


		sendKeys(driver, Loc_Search, LocationName2);
		
         wait(driver,"2");

		
		doubleClick(driver, Select_Loc1);
		wait(driver,"2");

		
		
		wait(driver,"3");

		
		click(driver, ShowButton);
		
		
		wait(driver,"3");
		
	
		Extent_cal(test, "Grid1");


			Fluentwait(driver, Grid_Textbox1);
			click(driver, Grid_Textbox1);
			
			
			sendKeys(driver, Grid_Textbox1, FieldInput_name);
			
			String Field_name = FieldInput_name.toUpperCase();
			System.out.println("Field_name :" + Field_name);

		
			wait(driver, "3");


		List<WebElement> Location_Mass_Cost_Update = driver.findElements(By.xpath("(//tbody[@id='MCU-MCU_gridCostUp_data']//tr//td[1])"));
		for (WebElement Location :Location_Mass_Cost_Update) {
			String Location1 = Location.getText();
			if(Location1.equals(Field_name)) {
				System.out.println("Matched ||Grid is Capturing both Upper case and lower case letters|| Expected Grid Value was : " + Location1
						+ "  || Actual Grid Value was : " + Field_name);
				Extent_pass(driver, "Matched ||Grid is Capturing both Upper case and lower case letters|| Expected Grid Value was : "
						+ Location1 + "  || Actual Grid Value was : " + Field_name,
						test,test1);
			} else {
				System.out.println(
						"Not Matched || Grid is not capturing both Upper case and lower case letters|| Expected Grid Value was : " + Location1
								+ "  || Actual Grid Value was : " + Field_name);
				Extent_fail2(driver, "Not Matched || Grid is not capturing both Upper case and lower case letters|| Expected Grid Value was : "
						+ Location1 + "  || Actual Grid Value was : " + Field_name,
						test);

			}
		}
					
				
		clear(driver, Grid_Textbox1);
		
		
		Extent_cal(test, "Grid2");
	
	
		
		wait(driver,"5");
		
		


		Fluentwait(driver, Grid_Textbox2);
		click(driver, Grid_Textbox2);
		
		
		sendKeys(driver, Grid_Textbox2, FieldInput_name1);
		
		String Field_name1 = FieldInput_name1.toUpperCase();
		System.out.println("Field_name1 :" + Field_name1);

	
		wait(driver, "3");


	List<WebElement> Location_Mass_Cost_Update1 = driver.findElements(By.xpath("(//tbody[@id='MCU-MCU_gridCostUp_data']//tr//td[7])"));
	for (WebElement Location_1 :Location_Mass_Cost_Update1) {
		String Location2 = Location_1.getText();
		if(Location2.equals(Field_name1)) {
			System.out.println("Matched ||Grid is Capturing both Upper case and lower case letters|| Expected Grid Value was : " + Location2
					+ "  || Actual Grid Value was : " + Field_name1);
			Extent_pass(driver, "Matched ||Grid is Capturing both Upper case and lower case letters|| Expected Grid Value was : "
					+ Location2 + "  || Actual Grid Value was : " + Field_name1,
					test,test1);
		} else {
			System.out.println(
					"Not Matched || Grid is not capturing both Upper case and lower case letters|| Expected Grid Value was : " + Location2
							+ "  || Actual Grid Value was : " + Field_name1);
			Extent_fail2(driver, "Not Matched || Grid is not capturing both Upper case and lower case letters|| Expected Grid Value was : "
					+ Location2 + "  || Actual Grid Value was : " + Field_name1,
					test);

		}
	}
		
		
	clear(driver, Grid_Textbox2);	
		
	Extent_cal(test, "Grid3");

	wait(driver,"5");
	
	


	Fluentwait(driver, Grid_Textbox3);
	click(driver, Grid_Textbox3);
	
	
	sendKeys(driver, Grid_Textbox3, FieldInput_name2);
	
	String Field_name2 = FieldInput_name2.toUpperCase();
	System.out.println("Field_name2 :" + Field_name2);


	wait(driver, "3");


List<WebElement> Location_Mass_Cost_Update2 = driver.findElements(By.xpath("(//tbody[@id='MCU-MCU_gridCostUp_data']//tr//td[9])"));
for (WebElement Location_2 :Location_Mass_Cost_Update2) {
	String Location3 = Location_2.getText();
	if(Location3.equals(Field_name2)) {
		System.out.println("Matched ||Grid is Capturing both Upper case and lower case letters|| Expected Grid Value was : " + Location3
				+ "  || Actual Grid Value was : " + Field_name2);
		Extent_pass(driver, "Matched ||Grid is Capturing both Upper case and lower case letters|| Expected Grid Value was : "
				+ Location3 + "  || Actual Grid Value was : " + Field_name2,
				test,test1);
	} else {
		System.out.println(
				"Not Matched || Grid is not capturing both Upper case and lower case letters|| Expected Grid Value was : " + Location3
						+ "  || Actual Grid Value was : " + Field_name2);
		Extent_fail2(driver, "Not Matched || Grid is not capturing both Upper case and lower case letters|| Expected Grid Value was : "
				+ Location3 + "  || Actual Grid Value was : " + Field_name2,
				test);

	}
}
	
	
clear(driver, Grid_Textbox3);	
	
		
Extent_cal(test, "Grid4");

wait(driver,"3");




Fluentwait(driver, Grid_Textbox4);
click(driver, Grid_Textbox4);


sendKeys(driver, Grid_Textbox4, FieldInput_name3);

String Field_name3 = FieldInput_name3.toUpperCase();
System.out.println("Field_name3 :" + Field_name3);


wait(driver, "3");


List<WebElement> Location_Mass_Cost_Update3 = driver.findElements(By.xpath("(//tbody[@id='MCU-MCU_gridCostUp_data']//tr//td[11])"));
for (WebElement Location_3 :Location_Mass_Cost_Update3) {
String Location4 = Location_3.getText();
if(Location4.equals(Field_name3)) {
	System.out.println("Matched ||Grid is Capturing both Upper case and lower case letters|| Expected Grid Value was : " + Location4
			+ "  || Actual Grid Value was : " + Field_name3);
	Extent_pass(driver, "Matched ||Grid is Capturing both Upper case and lower case letters|| Expected Grid Value was : "
			+ Location4 + "  || Actual Grid Value was : " + Field_name3,
			test,test1);
} else {
	System.out.println(
			"Not Matched || Grid is not capturing both Upper case and lower case letters|| Expected Grid Value was : " + Location4
					+ "  || Actual Grid Value was : " + Field_name3);
	Extent_fail2(driver, "Not Matched || Grid is not capturing both Upper case and lower case letters|| Expected Grid Value was : "
			+ Location4 + "  || Actual Grid Value was : " + Field_name3,
			test);

}
}

		
clear(driver, Grid_Textbox4);	
	
		
System.out
.println("//***************************Testcase 34 Completed **************************************//");

		
Extent_cal(test, "Testcase 35 - Ensure that all message icon should be followed as per SVM standard.");



click(driver, EditButton);

wait(driver, "2");


click(driver, Cancel_Button);

Fluentwait(driver, NewReport);
click(driver, NewReport);


wait(driver, "2");




List<WebElement> rowvalues = driver.findElements(By.xpath("//h2[text()='ERO Mass Cost Update']/following::button[text()='Yes']"));


for(WebElement row_value : rowvalues){
	
	String row_color = row_value.getCssValue("background-color");
	String hexcolor = rgbToHex(row_color);
	System.out.println("hexcolor : "+hexcolor);
	

	
	if(hexcolor.equals(Message_Icon_color1)) {
		
		System.out.println("Message icon followed as per SVM standard");
		Extent_pass(driver, "Message icon followed as per SVM standard", test, test1);
		
	}else {
		System.out.println("Message icon not followed as per SVM standard");
		Extent_fail(driver, "Message icon not followed as per SVM standard", test,
				test1);
		
	}
	
	}


Fluentwait(driver, Click_Confirm);
click(driver, Click_Confirm);

wait(driver,"5");










System.out
.println("//***************************Testcase 34 Completed **************************************//");
	
		
		
	}
		
	
}
	


