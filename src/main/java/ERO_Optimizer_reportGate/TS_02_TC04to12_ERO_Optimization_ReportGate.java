package ERO_Optimizer_reportGate;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Point;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.aventstack.extentreports.ExtentTest;

import commonMethods.Keywords;
import commonMethods.Utils;

public class TS_02_TC04to12_ERO_Optimization_ReportGate extends Keywords {
	public void Scenario2(WebDriver driver, ExtentTest test, ExtentTest test1, String url, int dataset)
			throws AWTException, IOException {

		System.out.println("url : " + url);
		String Username = Utils.getDataFromTestData("TS_02_TC04to12_ERO_Optimization_ReportGate_Dataset"+dataset, "ReportGate",
				"Username");
		String Password = Utils.getDataFromTestData("TS_02_TC04to12_ERO_Optimization_ReportGate_Dataset"+dataset, "ReportGate",
				"Password");
		String Expected_screencolor = Utils.getDataFromTestData("TS_02_TC04to12_ERO_Optimization_ReportGate_Dataset"+dataset,
				"ReportGate", "Screen_background");
		String Expected_Autogeneratedcolorcode = Utils.getDataFromTestData("TS_02_TC04to12_ERO_Optimization_ReportGate_Dataset"+dataset,
				"ReportGate", "Autogenerated_Color");
		String ID = Utils.getDataFromTestData("TS_02_TC04to12_ERO_Optimization_ReportGate_Dataset"+dataset, "ReportGate", "Id");
		String Expected_XPosition = Utils.getDataFromTestData("TS_02_TC04to12_ERO_Optimization_ReportGate_Dataset"+dataset,
				"ReportGate", "Sizetype_Xposition");
		String Expected_YPosition = Utils.getDataFromTestData("TS_02_TC04to12_ERO_Optimization_ReportGate_Dataset"+dataset,
				"ReportGate", "Sizetype_Yposition");
		String Expected_Error_Text_screencolor = Utils.getDataFromTestData("TS_02_TC04to12_ERO_Optimization_ReportGate_Dataset"+dataset,
				"ReportGate", "Expected_Error_Text_screencolor1");

		Actions act = new Actions(driver);
		Robot rbt = new Robot();

		WebDriverWait wait = new WebDriverWait(driver, 30);

		navigateUrl(driver, url);

		Fluentwait(driver, Username_input);
		sendKeys(driver, Username_input, Username);

		Fluentwait(driver, Password_input);
		sendKeys(driver, Password_input, Password);

		Fluentwait(driver, SignIn);
		click(driver, SignIn);

		wait(driver, "5");

		if (isDisplayed(driver, session_confirmation)) {
			Fluentwait(driver, session_confirmation);
			click(driver, session_confirmation);
		}

		Fluentwait(driver, Searchbox);
		sendKeys(driver, Searchbox, "ERO Optimization Report Gate");

		Fluentwait(driver, SelectOptimizer_ERO);
		click(driver, SelectOptimizer_ERO);

		Fluentwait(driver, Optimizer_cancle_Report_Gate);
		click(driver, Optimizer_cancle_Report_Gate);

		Fluentwait(driver, Optimizer_new_ERO);
		click(driver, Optimizer_new_ERO);

		Fluentwait(driver, Optimizer_createnew_confirm_ERO);
		click(driver, Optimizer_createnew_confirm_ERO);

		Extent_cal(test, "Testcase 04 - Ensure that the screen background should be in correct color.");

		Fluentwait(driver, Screen_ERO);
		wait(driver, "2");

		String actualscreencolor = getTextBackgroundColor(driver, Screen_ERO);

		if (actualscreencolor.equals(Expected_screencolor)) {

			System.out.println("Screen Background color Matched || Expected screen color was : " + Expected_screencolor
					+ " || Actual screen color was " + actualscreencolor);
			Extent_pass(driver, "Screen Background color Matched || Expected screen color was : " + Expected_screencolor
					+ " || Actual screen color was " + actualscreencolor, test, test1);

		} else {
			System.out.println("Screen Background color Not Matched || Expected screen color was : "
					+ Expected_screencolor + " || Actual screen color was " + actualscreencolor);
			Extent_fail(driver, "Screen Background color Not Matched || Expected screen color was : "
					+ Expected_screencolor + " || Actual screen color was " + actualscreencolor, test, test1);
		}

		System.out
				.println("//***************************Testcase 4 Completed **************************************//");

		Extent_cal(test, "Testcase 06 - Ensure the field background should be in correct color");

		Fluentwait(driver, ERO_ID_Field);
		wait(driver, "2");

		String ID_Backroundcolor = getTextBackgroundColor(driver, ERO_ID_Field);

		// System.out.println("Fromyear_Backroundcolor : " + ID_Backroundcolor);

		if (ID_Backroundcolor.equals(Expected_Autogeneratedcolorcode)) {

			System.out.println("Id field Background color Matched || Expected ID field color was : "
					+ Expected_Autogeneratedcolorcode + " || Actual ID field color was " + ID_Backroundcolor);
			Extent_pass(driver,
					"Id field Background color Matched || Expected ID field color was : "
							+ Expected_Autogeneratedcolorcode + " || Actual ID field color was " + ID_Backroundcolor,
					test, test1);
		} else {
			System.out.println("Id field Background color Not Matched || Expected ID field color was : "
					+ Expected_Autogeneratedcolorcode + " || Actual ID field color was " + ID_Backroundcolor);
			Extent_fail(driver,
					"Id field Background color Not Matched || Expected ID field color was : "
							+ Expected_Autogeneratedcolorcode + " || Actual ID field color was " + ID_Backroundcolor,
					test, test1);
		}

		System.out
				.println("//***************************Testcase 6 Completed **************************************//");

		Extent_cal(test, "Testcase 8 - Ensure the field box are aligned corrrectly in the screen");

		wait(driver, "3");

		WebElement IDfield = driver.findElement(By.xpath("//input[@id='ORG-ORG_txtDeficitSurplusID']"));

		Point IDfieldlocation = IDfield.getLocation();

		int IDfield_xposition = IDfieldlocation.getX();

		String actual_IDfield_XPosition = String.valueOf(IDfield_xposition);

		System.out.println("xposition :" + actual_IDfield_XPosition);

		int IDfield_yposition = IDfieldlocation.getY();

		String actual_IDfield_YPosition = String.valueOf(IDfield_yposition);

		System.out.println("yposition :" + actual_IDfield_YPosition);

		if (actual_IDfield_XPosition.equals(Expected_XPosition)
				&& actual_IDfield_YPosition.equals(Expected_YPosition)) {

			Extent_pass(driver, "Expected Size type X position is : " + Expected_XPosition
					+ " || Actual Size type ID field X position is : " + actual_IDfield_XPosition, test, test1);
			Extent_pass(driver, "Expected Size type Edit field Y position is : " + Expected_YPosition
					+ " || Actual Size type ID field Y position is : " + actual_IDfield_YPosition, test, test1);
			Extent_pass(driver, "Size type field is placed at correct position", test, test1);

		} else {

			Extent_fail(driver, "Expected Size type ID field X position is : " + Expected_XPosition
					+ " || Actual Size type ID field X position is : " + actual_IDfield_XPosition, test, test1);
			Extent_fail(driver, "Expected Size type ID field Y position is : " + Expected_YPosition
					+ " || Actual Size type ID field Y position is : " + actual_IDfield_YPosition, test, test1);
			Extent_fail(driver, "Size type field is not placed at correct position", test, test1);

		}

		System.out.println("Testcase  8 completed");

		System.out
				.println("//***************************Testcase 8 Completed **************************************//");

		Extent_cal(test, " 10- Testcase Ensure all character or alphanumeric or numeric fields correctly alligned");

		wait(driver, "5");

		Fluentwait(driver, Globalserach_ERO);
		click(driver, Globalserach_ERO);

		Fluentwait(driver, Globalserach_IDInput_ERO);
		sendKeys(driver, Globalserach_IDInput_ERO, ID);

		Fluentwait(driver, Click_Search_ERO);
		click(driver, Click_Search_ERO);

		wait(driver, "3");
		Fluentwait(driver, SelectID);
		doubleClick(driver, SelectID);
		wait(driver, "2");

		click(driver, Show_Button_ERO);

		wait(driver, "3");

		// click(driver, Detailed_view_ERO);

		Actions action = new Actions(driver);

		try {
			for (int i = 1; i <= 5; i++) {

				String FieldInput_name2 = Utils.getDataFromTestData("TS_02_TC04to12_ERO_Optimization_ReportGate",
						"ReportGate", "Filterfield" + i);

				WebElement gridfields = driver.findElement(By.xpath("(//div[@aria-colindex='" + i + "'])[1]"));

				String gridheader = driver.findElement(By.xpath("(//div[@aria-colindex='" + i + "'])[1]")).getText();

				action.moveToElement(gridfields).build().perform();

				String Grid_field = getTextofWebelement(driver, gridfields, "gridfields");

				String Allignmenttype = determineType(Grid_field);

				System.out.println("Allignmenttype : " + Allignmenttype);

				String attributevalue = getAttribute_webelement(driver, gridfields, "class");

				String attributevalue1 = gridfields.getAttribute("class");

				System.out.println("attributevalue : " + attributevalue);

				String allignment = extractDirection(attributevalue);

				if (allignment == null) {
					System.out.println("Unable to determine alignment for column " + gridheader);
//		        Extent_fail(driver, "Unable to determine alignment for column " + Columname, test,test1);
					allignment = "left";
				}

				System.out.println("allignment : " + allignment);

				if (Allignmenttype.equals("Alphabetic")) {

					if (allignment.equals("left")) {

						System.out.println("Column " + gridheader + " is Alphabetic and it aligned on the left side");
						Extent_pass(driver, "Column " + gridheader + " is Alphabetic and it aligned on the left side",
								test, test1);

					} else {
						System.out.println(
								"Column " + gridheader + " is Alphabetic and it was not aligned on the left side");
						Extent_fail(driver,
								"Column " + gridheader + " is Alphabetic and it was not aligned on the left side", test,
								test1);

					}

				}

				if (Allignmenttype.equals("Numeric")) {

					if (allignment.equals("left")) {

						System.out.println("Column " + gridheader + " is Numeric and it aligned on the Right side");
						Extent_pass(driver, "Column " + gridheader + " is Numeric and it aligned on the Right side",
								test, test1);

					} else {
						System.out.println(
								"Column " + gridheader + " is Numeric and it was not aligned on the Right side");
						Extent_fail(driver,
								"Column " + gridheader + " is Numeric and it was not aligned on the Right side", test,
								test1);

					}

				}

				if (Allignmenttype.equals("Alphanumeric")) {

					System.out.println("Column " + gridheader + " is Alpha Numeric ");

				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			Extent_fail(driver, e.getLocalizedMessage(), test, test1);
		}

		System.out
				.println("//***************************Testcase 10 Completed **************************************//");

		Extent_cal(test, "Testcase 11 - Verify the error message spelling should be in correct color");

//Fluentwait(driver, Summary_ERO);
//click(driver, Summary_ERO);	

		scrollUp(driver);

		Fluentwait(driver, Optimizer_cancle_Report_Gate);
		click(driver, Optimizer_cancle_Report_Gate);

		Fluentwait(driver, Optimizer_new_ERO);
		click(driver, Optimizer_new_ERO);

		Fluentwait(driver, Optimizer_createnew_confirm_ERO);
		click(driver, Optimizer_createnew_confirm_ERO);

		Fluentwait(driver, Load_Location);
		click(driver, Load_Location);

		wait(driver, "5");

		Fluentwait(driver, Popup_text_ERO);

		String Actual_error_text_Color = getTextBackgroundColor(driver, Popup_text_ERO);

		if (Actual_error_text_Color.equals(Expected_Error_Text_screencolor)) {

			System.out.println(" error message spelling color Matched || Expected error message spelling color was : "
					+ Expected_Error_Text_screencolor + " || Actual error message spelling color was "
					+ Actual_error_text_Color);
			Extent_pass(driver,
					"error message spelling color Matched || Expected error message spelling color was : "
							+ Expected_Error_Text_screencolor + " || Actual error message spelling color was "
							+ Actual_error_text_Color,
					test, test1);

		} else {
			System.out
					.println("error message spelling color Not Matched || Expected error message spelling color was : "
							+ Expected_Error_Text_screencolor + " || Actual error message spelling color was "
							+ Actual_error_text_Color);
			Extent_fail(driver,
					"error message spelling color Not Matched || Expected error message spelling color was : "
							+ Expected_Error_Text_screencolor + " || Actual error message spelling color was "
							+ Actual_error_text_Color,
					test, test1);
		}

		Fluentwait(driver, Popup_text_Ok);
		click(driver, Popup_text_Ok);

		System.out
				.println("//***************************Testcase 11 Completed **************************************//");

		Extent_cal(test, "Testcase 12 - Verify the user input captured UPPER case or lower case consistently");

		scrollBottom(driver);

		Fluentwait(driver, ColumnFilter_ERO_Gate);
		click(driver, ColumnFilter_ERO_Gate);

		click(driver, Check_box);

		wait(driver, "2");

		boolean filter = true;

		for (int i = 1; i <= 5; i++) {

			wait(driver, "2");

			String FieldInput_name1 = Utils.getDataFromTestData("TS_02_TC04to12_ERO_Optimization_ReportGate",
					"ReportGate", "Filterfield" + i);
			scrollBottom(driver);

			Fluentwait(driver, ColumnFilter_Input_ERO_gate);
			clear(driver, ColumnFilter_Input_ERO_gate);
			sendKeys(driver, ColumnFilter_Input_ERO_gate, FieldInput_name1);

			elementScreenShot_new(driver, ColumnFilter_field_ERO,
					"/Expected_screenshot/ERO Optimization Report Gate/ERO_ReportGate_filter" + i);

			elementScreenShot_new(driver, ColumnFilter_field_ERO,
					"/Actual_screenshot/ERO Optimization Report Gate/ERO_ReportGate_filter" + i);

			if (imageComparison2(driver, "//ERO Optimization Report Gate//ERO_ReportGate_filter" + i,
					"//ERO Optimization Report Gate//ERO_ReportGate_filter" + i) == true) {

				System.out
						.println("Filter is capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name1);
				Extent_pass(driver,
						"Filter is capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name1,
						test, test1);
			} else {

				System.out.println(
						"Filter is not capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name1);
				Extent_fail(driver,
						"Filter is not capturing both Upper case and lower case letters and the given value was : "
								+ FieldInput_name1,
						test, test1);
				filter = false;
			}

		}

		if (filter) {

			System.out.println("Filter input is capturing both upper and lower case consistently");
			Extent_pass(driver, "Filter input is capturing both upper and lower case consistently", test, test1);
		} else {
			System.out.println("Filter input is not capturing upper/lower case values");
			Extent_fail(driver, "Filter input is not capturing upper/lower case values", test, test1);
		}

		wait(driver, "5");

		Fluentwait(driver, ColumnFilter_ERO_Gate);
		click(driver, ColumnFilter_ERO_Gate);

		System.out
				.println("//***************************Testcase 12 Completed **************************************//");

	}

}
